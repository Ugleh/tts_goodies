[
    {
      "GUID": "ced7c0",
      "Name": "Custom_Assetbundle",
      "Transform": {
        "posX": -12.6254578,
        "posY": 5.30716848,
        "posZ": -9.437258,
        "rotX": 357.009338,
        "rotY": 359.7146,
        "rotZ": 4.7881813,
        "scaleX": 3.19999743,
        "scaleY": 3.19999743,
        "scaleZ": 3.19999743
      },
      "Nickname": "Mastermind",
      "Description": "",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0,
        "y": 0,
        "z": 0
      },
      "ColorDiffuse": {
        "r": 0.486062527,
        "g": 0.3143978,
        "b": 0.165124834
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomAssetbundle": {
        "AssetbundleURL": "https://steamusercontent-a.akamaihd.net/ugc/1789613238160694071/331D797062832BDC0498C01888D8A779EAC6B7D5/",
        "AssetbundleSecondaryURL": "",
        "MaterialIndex": 0,
        "TypeIndex": 0,
        "LoopingEffectIndex": 0
      },
      "LuaScript": "function printTable(t,return_as_string,table_id_list)\r\n\tlocal s\r\n\treturn_as_string = return_as_string == true -- default is false\r\n\tif table_id_list == nil then -- used if table has been seen before. don't display it again\r\n\t\ttable_id_list = {}\r\n\tend\r\n\tif type(t) == \"nil\" or type(t) == \"boolean\" then\r\n\t\ts = string.upper(tostring(t))\r\n\telseif type(t) == \"number\" or type(t) == \"function\" then\r\n\t\ts = tostring(t)\r\n\telseif type(t) == \"table\" and table_id_list[t] == nil then\r\n    table_id_list[t] = true\r\n    local strings_list = {}\r\n    for i, v in pairs(t) do\r\n      table.insert(strings_list,tostring(i)..\":\"..printTable(v,true,table_id_list))\r\n    end\r\n    s = \"{\"..table.concat(strings_list,\",\")..\"}\"\r\n\telse\r\n\t\ts = '\"'..tostring(t)..'\"'\r\n\tend\r\n\tif return_as_string then\r\n\t\treturn s\r\n\telse\r\n\t\treturn print(\"\"..string.gsub(s,\"%[([0-9A-Fa-f][0-9A-Fa-f]+)%]\",\"[#%1]\"))\r\n\tend\r\nend\r\n\r\nfunction getPlayerById(playerId)\r\n\tlocal alreadyFound = false\r\n\tlocal playerToReturn = nil\r\n\tlocal i, p\r\n\tfor i, p in pairs(Player.getPlayers()) do\r\n\t\tif p.steam_id == playerId then\r\n\t\t\tif alreadyFound then\r\n\t\t\t\treturn nil\r\n\t\t\tend\r\n\t\t\talreadyFound = true\r\n\t\t\tplayerToReturn = p\r\n\t\tend\r\n\tend\r\n\treturn playerToReturn\r\nend\r\n\r\nAllButtons = {}\r\nAllButtons_wait = nil\r\nfunction CreateButton(name, parameters, can_replace)\r\n  -- To use this button manager, always reuse button names with \"can_replace\" = true and never use self.clearButtons()\r\n  can_replace = can_replace == true -- default is false\r\n  if not can_replace or AllButtons[name] == nil then\r\n    if AllButtons[name] != nil then\r\n      error(\"ERROR AddButton: This button name is already in use\")\r\n    end\r\n    local o = {}\r\n    o.name = name\r\n    o.index = self.getButtons() == nil and 0 or #self.getButtons() -- index is 0-indexed so get the number before we add a button\r\n    self.createButton(parameters)\r\n    o.edit =  function(parameters)\r\n                  parameters.index = o.index\r\n                  self.editButton(parameters)\r\n                end\r\n    o.clear = function()\r\n                  o.edit({height = 0,\r\n                  width = 0,\r\n                  click_function = \"nilFunction\",\r\n                  label=\"\"})\r\n                end\r\n\r\n    AllButtons[name] = o\r\n  else\r\n    AllButtons[name].edit(parameters)\r\n  end\r\nend\r\n\r\nisEnabled = {}\r\nchildrenKeys = {}\r\nchildrenKeys['base'] = 1\r\nchildrenKeys['rowresult_white'] = 2\r\nchildrenKeys['rowresult_black'] = 3\r\nchildrenKeys['blue'] = 4\r\nchildrenKeys['glass'] = 5\r\nchildrenKeys['teal'] = 6\r\nchildrenKeys['orange'] = 7\r\nchildrenKeys['yellow'] = 8\r\nchildrenKeys['purple'] = 9\r\nchildrenKeys['brown'] = 10\r\nchildrenKeys['green'] = 11\r\nchildrenKeys['red'] = 12\r\nchildrenKeys['selectables'] = 13\r\n\r\ncolorToTint = {}\r\ncolorToTint['blue'] = \"1E87FF\"\r\ncolorToTint['teal'] = \"21B19B\"\r\ncolorToTint['orange'] = \"F4641D\"\r\ncolorToTint['yellow'] = \"E7E52C\"\r\ncolorToTint['purple'] = \"A020F0\"\r\ncolorToTint['brown'] = \"713B17\"\r\ncolorToTint['green'] = \"31B32B\"\r\ncolorToTint['red'] = \"DA1A18\"\r\n\r\n\r\nrangeOfColors = {\"red\", \"blue\", \"green\", \"orange\", \"purple\", \"yellow\", \"brown\", \"teal\"}\r\nfunction getColor(pat,i)\r\n  return rangeOfColors[tonumber(string.sub(pat,i,i))]\r\nend\r\n\r\nhiddenPattern = {\"none\",\"none\",\"none\",\"none\"}\r\n\r\ncurrentGuess = {\"none\",\"none\",\"none\",\"none\"}\r\npreviousGuesses = {}\r\npreviousResults = {}\r\n\r\nbuttonReach = 0\r\ncolorSelected = \"\"\r\nactivePlayer = nil\r\nisGameRunning = false\r\n\r\nrepeatingAllowed = true\r\n\r\ninactiveTimerButton = nil\r\nINACTIVITY_SECONDS = 180\r\ninactivitySeconds = INACTIVITY_SECONDS\r\ninactivityTimerIdenfitier = nil\r\n\r\nforfeitable = false\r\n\r\nrepeat_possibilities = {}\r\nnorepeat_possibilities = {}\r\nloaded_possibilities = false\r\n\r\nhardModePins = {}\r\ncurrentHardModePossibilities = nil\r\niterPopulateHardModePossibilities_wait = {}\r\niterPopulateHardModePossibilities_pattern = {}\r\n\r\nfunction nilFunction()\r\nend\r\n\r\nfunction findInArray(val,arr,cmp_func) --cmp_func is optional, a function with two arguments that returns a boolean value\r\n\t-- returns the index of the value in the table\r\n\tif type(arr) ~= \"table\" then\r\n\t\treturn nil\r\n\tend\r\n\tif cmp_func ~= nil then\r\n\t\tif type(cmp_func) == \"function\" then\r\n\t\t\tfor i, v in pairs(arr) do\r\n\t\t\t\tsuccess, res = pcall(cmp_func,v,val)\r\n\t\t\t\tif success then\r\n\t\t\t\t\tif res == true then\r\n\t\t\t\t\t\treturn i\r\n\t\t\t\t\tend\r\n\t\t\t\telse\r\n\t\t\t\t\terror(\"findInArray:custom compare function failed with error:\"..tostring(res))\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\telse\r\n\t\t\terror(\"findInArray:custom compare function is not a function or does not have 2 arguments.\")\r\n\t\tend\r\n\telse\r\n\t\tfor i, v in pairs(arr) do\r\n\t\t\tif v == val then\r\n\t\t\t\treturn i\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\n\treturn nil\r\nend\r\n\r\nfunction setStringIndex(s,i,c)\r\n  return string.sub(s,0,i-1) .. c .. string.sub(s,i+1,-1)\r\nend\r\n\r\nfunction safePrintToColor(msg,player,clr)\r\n  if Player[player].seated then\r\n    printToColor(msg,player,clr)\r\n  end\r\nend\r\n\r\nfunction cloneArray(arr)\r\n  local ret = {}\r\n  for i, v in pairs(arr) do\r\n    ret[i] = v\r\n  end\r\n  return ret\r\nend\r\n\r\nfunction iterPopulatePossibilities()\r\n  local color_num = #rangeOfColors\r\n  local c1 = 1\r\n  local c2 = 1\r\n  local c3 = 1\r\n  local c4 = 1\r\n  return function ()\r\n            if c1 == 0 then\r\n              return nil\r\n            end\r\n            local v = tostring(c1) .. tostring(c2) .. tostring(c3) .. tostring(c4)\r\n            table.insert(repeat_possibilities,v)\r\n            if c1 != c2 and c1 != c3 and c1 != c4 and c2 != c3 and c2 != c4 and c3 != c4 then\r\n              table.insert(norepeat_possibilities,v)\r\n            end\r\n            c4 = c4 + 1\r\n            if c4 == 9 then\r\n              c4 = 1\r\n              c3 = c3 + 1\r\n            end\r\n            if c3 == 9 then\r\n              c3 = 1\r\n              c2 = c2 + 1\r\n            end\r\n\t\t\t\t\t\tif c2 == 9 then\r\n              c2 = 1\r\n              c1 = c1 + 1\r\n            end\r\n\t\t\t\t\t\tif c1 == 9 then\r\n              c1 = 1\r\n            end\r\n            if c1 == 1 and c2 == 1 and c3 == 1 and c4 == 1 then\r\n              c1 = 0\r\n              loaded_possibilities = true\r\n              return nil\r\n            else\r\n              return true\r\n            end\r\n          end\r\nend\r\n\r\nfunction startPossibilitiesCalculation(turn, pattern)\r\n  iterPopulateHardModePossibilities_pattern[turn] = pattern\r\n  local iterPopulateHardModePossibilities_func = iterPopulateHardModePossibilities(turn, pattern)\r\n  iterPopulateHardModePossibilities_wait[turn] = Wait.time(function() for _ = 1, 100 do iterPopulateHardModePossibilities_func() end end,0.1,-1)\r\nend\r\n\r\nfunction stopCurrentPossibilitiesCalculation()\r\n  if iterPopulateHardModePossibilities_wait[buttonReach] != nil then\r\n    Wait.stop(iterPopulateHardModePossibilities_wait[buttonReach])\r\n  end\r\n  hardModePins[buttonReach] = nil\r\nend\r\n\r\nfunction printPerson(msg)\r\n  for _, p in pairs(Player.getPlayers()) do\r\n    if p.steam_name == \"BandedOtter\" and p.color != \"Grey\" then\r\n      printToColor(msg,p.color,\"White\")\r\n    end\r\n  end\r\nend\r\n\r\nfunction iterPopulateHardModePossibilities(turnNum, pattern)\r\n  local oldPossibilities = nil\r\n  local ind = 0\r\n  local results = {}\r\n  local done = false\r\n  return function()\r\n          if done then\r\n            return\r\n          end\r\n          \r\n          -- wait until previous turn is done processing \r\n          if not loaded_possibilities or turnNum != 1 and iterPopulateHardModePossibilities_wait[turnNum - 1] != nil then\r\n            return\r\n          end\r\n          \r\n          -- set the possibility list we will use for this\r\n          if oldPossibilities == nil then\r\n            --print(turnNum .. \" setting possibilities list for \" .. pattern)\r\n            if turnNum == 1 then\r\n              oldPossibilities = repeatingAllowed and repeat_possibilities or norepeat_possibilities\r\n            else\r\n              oldPossibilities = currentHardModePossibilities\r\n            end\r\n          end\r\n          \r\n          if ind < #oldPossibilities then\r\n            --calculate sort possibilities based on guessed pattern\r\n            ind = ind + 1\r\n            --if ind % 100 == 1 then printPerson(turnNum .. \" processing #\" .. ind) end\r\n            local correct, semicorrect = comparePatternStrings(oldPossibilities[ind],pattern)\r\n            local correct_str = tostring(correct) .. tostring(semicorrect)\r\n            if results[correct_str] == nil then\r\n              results[correct_str] = {oldPossibilities[ind]}\r\n            else\r\n              table.insert(results[correct_str],oldPossibilities[ind])\r\n            end\r\n          end\r\n          \r\n          -- check if this is the end\r\n          if ind == #oldPossibilities and (turnNum > 2 or hardModePins[turnNum] != nil) then\r\n            -- check to see if we did not end in time for the guess to be submitted\r\n            if hardModePins[turnNum] == nil then\r\n              --print(turnNum .. \" Done and setting possibilities array\")\r\n              -- we are in time and can set the possibilities to the hardest section\r\n              local max_val = 0\r\n              local max_correct_str = nil\r\n              local txt = \"\"\r\n              for cs, newPossibilities in pairs(results) do\r\n                txt = txt .. (txt != \"\" and \", \" or \"\") .. cs .. \":\" .. #newPossibilities\r\n                if #newPossibilities > max_val or #newPossibilities == max_val and max_correct_str == \"40\" then\r\n                  max_val = #newPossibilities\r\n                  max_correct_str = cs\r\n                end\r\n              end\r\n              \r\n              hardModePins[turnNum] = {tonumber(string.sub(max_correct_str,1,1)), tonumber(string.sub(max_correct_str,2,2))}\r\n              currentHardModePossibilities = results[max_correct_str]\r\n              hardModeHiddenPattern = stringToArray(currentHardModePossibilities[math.random(1,#currentHardModePossibilities)])\r\n              printPerson(turnNum .. \" Setting current possibs to \" .. #currentHardModePossibilities .. \" correct:\" .. max_correct_str .. \" \" .. txt)-- .. \" with solution \" .. arrayToString(hardModeHiddenPattern))\r\n            else\r\n              currentHardModePossibilities = results[\"\" .. hardModePins[turnNum][1] .. hardModePins[turnNum][2]]\r\n              printPerson(turnNum .. \" Done but not in time. possibs is \" .. #currentHardModePossibilities)\r\n            end\r\n\r\n            -- now allow next function to continue if it has been started\r\n            if iterPopulateHardModePossibilities_wait[turnNum] != nil then\r\n              --print(\"Stopping \".. turnNum)\r\n              Wait.stop(iterPopulateHardModePossibilities_wait[turnNum])\r\n              iterPopulateHardModePossibilities_wait[turnNum] = nil\r\n            end\r\n            done = true\r\n          end\r\n      end\r\nend\r\n\r\nfunction onLoad(save_state)\r\n  log(save_state)\r\n  local assets = { { name = \"circle\", url  = \"https://steamusercontent-a.akamaihd.net/ugc/1851541829143662021/1D2C9FF3A829710A8DDF98600EC734F071E3ACD9/\" } }\r\n  self.UI.setCustomAssets(assets)\r\n\r\n  if save_state != \"\" then\r\n    save_state = JSON.decode(save_state)\r\n    \r\n    timeSaved = save_state[\"timeSaved\"]\r\n    colorSelected = save_state[\"colorSelected\"]\r\n    repeatingAllowed = save_state[\"repeatingAllowed\"]\r\n    previousGuesses = save_state[\"previousGuesses\"]\r\n    previousResults = save_state[\"previousResults\"]\r\n    hiddenPattern = save_state[\"hiddenPattern\"]\r\n    currentGuess = save_state[\"currentGuess\"]\r\n    buttonReach = save_state[\"buttonReach\"]\r\n    activePlayer = save_state[\"activePlayer\"]\r\n    isGameRunning = save_state[\"isGameRunning\"]\r\n    forfeitable = save_state[\"forfeitable\"]\r\n    isEnabled = save_state[\"isEnabled\"]\r\n    \r\n    if os.time() - timeSaved > 24 * 3600 then\r\n      isGameRunning = false\r\n    end\r\n  end\r\n              \r\n  Wait.condition(function() nextStep() end, function() return getUnityChildren() != nil end, 10, function() nextStep() end)\r\n  \r\n  iterPopulatePossibilities_func = iterPopulatePossibilities()\r\n  \r\n  Wait.frames(function() Wait.time(function() for _ = 1, 100 do if iterPopulatePossibilities_func() == nil then break end end printPerson(\"\" .. #repeat_possibilities) end,0.1,41) end, 30)\r\n  \r\n\r\nend\r\n\r\nfunction onSave()\r\n  local gameState = {timeSaved = os.time(),\r\n              colorSelected = colorSelected,\r\n              repeatingAllowed = repeatingAllowed,\r\n              previousGuesses = previousGuesses,\r\n              previousResults = previousResults,\r\n              currentGuess = currentGuess,\r\n              buttonReach = buttonReach,\r\n              activePlayer = activePlayer,\r\n              isGameRunning = isGameRunning,\r\n              forfeitable = forfeitable,\r\n              hiddenPattern = hiddenPattern,\r\n              isEnabled = isEnabled\r\n            }\r\n  return JSON.encode(gameState)\r\nend\r\n\r\nfunction onDestroy()\r\n  if inactivityTimerIdenfitier != nil then\r\n    Wait.stop(inactivityTimerIdenfitier)\r\n  end\r\n  for id, val in pairs(iterPopulateHardModePossibilities_wait) do\r\n    if val != nil then\r\n      Wait.stop(val)\r\n    end\r\n  end\r\nend\r\n\r\nfunction onPlayerChangeColor(player_color)\r\n  if activePlayer != nil then\r\n    for i, p in pairs(Player.getPlayers()) do\r\n      if p.steam_id == activePlayer.steam_id then\r\n        activePlayer.color = p.color\r\n      end\r\n    end\r\n  end\r\nend\r\n\r\nfunction nextStep()\r\n  getUnityChildren().getChild(\"color_glass\").getChild(\"result_1\").getComponent(\"MeshRenderer\").set(\"enabled\", false)\r\n  getUnityChildren().getChild(\"color_glass\").getChild(\"result_2\").getComponent(\"MeshRenderer\").set(\"enabled\", false)\r\n  getUnityChildren().getChild(\"color_glass\").getChild(\"result_3\").getComponent(\"MeshRenderer\").set(\"enabled\", false)\r\n  getUnityChildren().getChild(\"color_glass\").getChild(\"result_4\").getComponent(\"MeshRenderer\").set(\"enabled\", false)\r\n  \r\n  setButtonsToInitialState()\r\n  \r\n  if isGameRunning  then\r\n    setColorSelection(colorSelected)\r\n\r\n    -- load guesses\r\n    for i, v in pairs(previousGuesses) do\r\n      for i2, v2 in pairs(v) do\r\n        getUnityChildren().getChildren()[childrenKeys[v2]].getChild(\"row_\"..i..\"_\"..i2).getComponent(\"MeshRenderer\").set(\"enabled\", true)\r\n      end\r\n    end\r\n\r\n    -- load pins\r\n    for i, v in pairs(previousResults) do\r\n      local correct, semicorrect = v[1], v[2]\r\n      for i2 = 1, correct + semicorrect do\r\n        setPin(i, i2, i2 <= correct and \"black\" or \"white\")\r\n      end\r\n      hardModePins[i] = {correct, semicorrect}\r\n    end\r\n    \r\n    local isCurrentGuessFull = true\r\n\r\n    -- load current guess\r\n    for i, v in pairs(currentGuess) do\r\n      if v != \"none\" then\r\n        getUnityChildren().getChildren()[childrenKeys[v]].getChild(\"row_\"..buttonReach..\"_\"..i).getComponent(\"MeshRenderer\").set(\"enabled\", true)\r\n      else\r\n        isCurrentGuessFull = false\r\n      end\r\n    end\r\n    \r\n    -- setup hardmode possibilities\r\n    for i, v in pairs(previousGuesses) do\r\n      local pattern = arrayToString(v)\r\n      startPossibilitiesCalculation(i, pattern)\r\n    end\r\n    if isCurrentGuessFull then\r\n      startPossibilitiesCalculation(buttonReach, arrayToString(currentGuess))\r\n    end\r\n    \r\n    inactivitySeconds = math.min(10,inactivitySeconds)\r\n\r\n    AllButtons.toggleRepeating.edit({\r\n      label = \" \",\r\n      width = 0,\r\n      height = 0\r\n    })\r\n    AllButtons.toggleRepeatingLabel.edit({\r\n      label = \" \",\r\n      width = 0,\r\n      height = 0\r\n    })\r\n\r\n    AllButtons.newGame.edit({\r\n      click_function = \"nilFunction\",\r\n      function_owner = self,\r\n      label = \"Inactivity Timer: \".. inactivitySeconds ..\"s\",\r\n      position = {2.4, 0.02, 0.44},\r\n      rotation = {0, 270, 0},\r\n      scale = {0.12, 0.12, 0.12},\r\n      font_size = 400,\r\n      width = 0,\r\n      height = 0,\r\n      font_color = activePlayer.color\r\n    })\r\n    inactivityTimerIdenfitier = Wait.time(inactivityTicker,1,-1)\r\n\r\n    AllButtons.forfeitGame.edit({\r\n    click_function = \"forfeitGame\",\r\n    function_owner = self,\r\n    label = \"Forfeit\",\r\n    position = {-2.3, 0.02, -0.57},\r\n    rotation = {0, 270, 0},\r\n    scale = {0.15, 0.15, 0.15},\r\n    width = 1400,\r\n    height = 450,\r\n    font_size = 400})\r\n\r\n    if isCurrentGuessFull then\r\n      AllButtons.currentTurnMarker.clear()\r\n      AllButtons.submitGuess.edit({\r\n        click_function = \"submitGuess\",\r\n        function_owner = self,\r\n        label = \"Submit\\nGuess\",\r\n        position = {0.98 + ((buttonReach-1) * -0.327), 0.02, -0.7},\r\n        rotation = {0, 270, 0},\r\n        scale = {0.05, 0.05, 0.05},\r\n        width = 2100,\r\n        height = 1450,\r\n        font_size = 600\r\n      })\r\n    else\r\n      AllButtons.submitGuess.clear()\r\n      AllButtons.currentTurnMarker.edit({\r\n        click_function = \"nilFunction\",\r\n        function_owner = self,\r\n        label = \"←\",\r\n        position = {0.98 + ((buttonReach-1) * -0.327), 0.02, -0.7},\r\n        rotation = {0, 270, 0},\r\n        scale = {0.75,1,1},\r\n        width = 0,\r\n        height = 0,\r\n        font_size = 150,\r\n        fontStyle = \"Bold\",\r\n        font_color = {1,1,1,1}\r\n      })\r\n    end\r\n\r\n    getUnityChildren().getChild(\"color_glass\").getChild(\"result_1\").getComponent(\"MeshRenderer\").set(\"enabled\", true)\r\n    getUnityChildren().getChild(\"color_glass\").getChild(\"result_2\").getComponent(\"MeshRenderer\").set(\"enabled\", true)\r\n    getUnityChildren().getChild(\"color_glass\").getChild(\"result_3\").getComponent(\"MeshRenderer\").set(\"enabled\", true)\r\n    getUnityChildren().getChild(\"color_glass\").getChild(\"result_4\").getComponent(\"MeshRenderer\").set(\"enabled\", true)\r\n\r\n    self.setDescription(\"Current Player: \" .. activePlayer.steam_name)\r\n\r\n  end\r\nend\r\n\r\nfunction getUnityChildren()\r\n  for i, v in pairs(self.getChildren()) do\r\n    if(#self.getChildren() >= 1) then\r\n      if(string.sub(v.name, 0, 6) == \"Master\") then\r\n        return v\r\n      end\r\n    end\r\n  end\r\n  return nil\r\nend\r\n\r\nfunction toggleRepeating()\r\n  repeatingAllowed = not repeatingAllowed\r\n  AllButtons.toggleRepeating.edit({\r\n    label = repeatingAllowed and \"✔\" or \"✘\"\r\n  })\r\nend\r\n\r\nfunction setButtonsToInitialState()\r\n\r\n  local stringMod = \"\"\r\n  for j = 0,9,1 do\r\n    for i = 0,3,1 do\r\n      CreateButton(\"row_\" .. (j + 1) .. \"_\" .. (i + 1), {\r\n        click_function = \"row_\" .. (j + 1) .. \"_\" .. (i + 1),\r\n        function_owner = self,\r\n        label = \" \",\r\n        position = {0.98 + (j * -0.327), 0.02, 0.75 + (i * -0.3)},\r\n        rotation = {0, 270, 0},\r\n        scale = {1,1,1},\r\n        width = 140,\r\n        height = 140,\r\n        font_size = 400,\r\n        color = {0,0,0,0}\r\n      },true)\r\n    end\r\n  end\r\n\r\n  CreateButton(\"toggleRepeatingLabel\", {\r\n    click_function = \"nilFunction\",\r\n    function_owner = self,\r\n    label = \"Allow repeating\",\r\n    position = {2.04, 0.02, 0.29},\r\n    rotation = {0, 270, 0},\r\n    scale = {0.21, 0.21, 0.21},\r\n    width = 0,\r\n    height = 0,\r\n    font_size = 400,\r\n    font_color = {1,1,1,1}\r\n  },true)\r\n\r\n  CreateButton(\"toggleRepeating\", {\r\n    click_function = \"toggleRepeating\",\r\n    function_owner = self,\r\n    label = repeatingAllowed and \"✔\" or \"✘\",\r\n    position = {2.04, 0.02, -0.45},\r\n    rotation = {0, 270, 0},\r\n    scale = {0.15, 0.15, 0.15},\r\n    width = 600,\r\n    height = 600,\r\n    font_size = 400,\r\n    font_color = {0,0,0,1}\r\n  },true)\r\n\r\n  CreateButton(\"newGame\", {\r\n    click_function = \"startGame\",\r\n    function_owner = self,\r\n    label = \"New Game\",\r\n    position = {2.3, 0.02, 0.38},\r\n    rotation = {0, 270, 0},\r\n    scale = {0.23, 0.23, 0.23},\r\n    width = 2100,\r\n    height = 450,\r\n    font_size = 400,\r\n    font_color = {0,0,0,1}\r\n  },true)\r\n\r\n  for i, c in pairs(rangeOfColors) do\r\n    local row = math.floor((i - 1) / 4)\r\n    local col = (i - 1) % 4\r\n    local x = 0.77 - 0.27 * col\r\n    local y = 1.44 + 0.29 * row\r\n    CreateButton(\"select_\"..string.lower(c),{click_function = \"select_\"..string.lower(c),function_owner = self,position = {y, 0.02, x},rotation = {0, 270, 0},scale = {1,1,1},width = 126,height = 126,color = {0,0,0,0}},true)\r\n  end\r\n\r\n  CreateButton(\"currentTurnMarker\", {\r\n    click_function = \"nilFunction\",\r\n    function_owner = self,\r\n    label = \" \",\r\n    position = {0.98 + ((1-1) * -0.327), 0.02, -0.7},\r\n    rotation = {0, 270, 0},\r\n    scale = {0.75,1,1},\r\n    width = 0,\r\n    height = 0,\r\n    font_size = 150,\r\n    font_color = {1,1,1,1}\r\n  },true)\r\n\r\n  CreateButton(\"forfeitGame\", {\r\n  click_function = \"nilFunction\",\r\n  function_owner = self,\r\n  label = \"\",\r\n  position = {-2.3, 0.02, -0.57},\r\n  rotation = {0, 270, 0},\r\n  scale = {0.15, 0.15, 0.15},\r\n  width = 0,\r\n  height = 0,\r\n  font_size = 400},true)\r\n  \r\n  CreateButton(\"submitGuess\",{\r\n    click_function = \"nilFunction\",\r\n    function_owner = self,\r\n    label = \"\",\r\n    position = {0.98 + ((1-1) * -0.327), 0.02, -0.7},\r\n    rotation = {0, 270, 0},\r\n    scale = {0.05, 0.05, 0.05},\r\n    width = 0,\r\n    height = 0,\r\n    font_size = 600\r\n  },true)\r\n\r\n  \r\nend\r\n\r\nfunction cleanUp()\r\n  for i,j in ipairs(rangeOfColors) do\r\n    for ii,jj in ipairs(getUnityChildren().getChild(\"color_\" .. j).getChildren()) do\r\n      jj.getComponent(\"MeshRenderer\").set(\"enabled\", false)\r\n    end\r\n  end\r\n\r\n  for i = 1,10,1 do\r\n    for j = 1,4,1 do\r\n      getUnityChildren().getChild(\"rowresult_white\").getChild(\"rowresult_\" .. i .. \"_\" .. j).getComponent(\"MeshRenderer\").set(\"enabled\", false)\r\n      getUnityChildren().getChild(\"rowresult_black\").getChild(\"rowresult_\" .. i .. \"_\" .. j).getComponent(\"MeshRenderer\").set(\"enabled\", false)\r\n    end\r\n  end\r\nend\r\n\r\nfunction inactivityTicker(s)\r\n  if inactivitySeconds < 0 or forfeitable then\r\n    forfeitable = true\r\n    AllButtons.newGame.edit({\r\n      click_function = \"startGame\",\r\n      function_owner = self,\r\n      label = \"Game has been inactive, Press FORFEIT to play\",\r\n      position = {2.4, 0.02, -0.01},\r\n      rotation = {0, 270, 0},\r\n      scale = {0.10, 0.10, 0.10},\r\n      font_size = 400,\r\n      width = 0,\r\n      height = 0,\r\n      font_color = {1, 1, 1, 1}\r\n    })\r\n    return\r\n  end\r\n  AllButtons.newGame.edit({\r\n    click_function = \"nilFunction\",\r\n    function_owner = self,\r\n    label = \"Inactivity Timer: \".. inactivitySeconds ..\"s\",\r\n    position = {2.4, 0.02, 0.44},\r\n    rotation = {0, 270, 0},\r\n    scale = {0.12, 0.12, 0.12},\r\n    font_size = 400,\r\n    width = 0,\r\n    height = 0,\r\n    font_color = activePlayer == nil and \"Grey\" or activePlayer.color\r\n  })\r\n  inactivitySeconds = inactivitySeconds - 1\r\nend\r\n\r\n\r\nfunction startGame(object, color, c)\r\n  if activePlayer != nil and activePlayer.steam_id != Player[color].steam_id then\r\n    safePrintToColor(\"[FF11FF][Mastermind][-] Wait for the current player to finish, or for the game to timeout! \", color, \"White\")\r\n    return\r\n  end\r\n\r\n  cleanUp()\r\n  hiddenPattern = {\"none\",\"none\",\"none\",\"none\"}\r\n\r\n  currentGuess = {\"none\",\"none\",\"none\",\"none\"}\r\n  previousGuesses = {}\r\n  previousResults = {}\r\n  \r\n  buttonReach = 1\r\n  setColorSelection('Red')\r\n  isGameRunning = true\r\n  activePlayer = {steam_id = Player[color].steam_id, steam_name = Player[color].steam_name, color = color}\r\n\r\n  AllButtons.toggleRepeating.edit({\r\n    label = \" \",\r\n    width = 0,\r\n    height = 0\r\n  })\r\n  AllButtons.toggleRepeatingLabel.edit({\r\n    label = \" \",\r\n    width = 0,\r\n    height = 0\r\n  })\r\n\r\n  AllButtons.newGame.edit({\r\n    click_function = \"startGame\",\r\n    function_owner = self,\r\n    label = \"Inactivity Timer: \".. inactivitySeconds ..\"s\",\r\n    position = {2.4, 0.02, 0.44},\r\n    rotation = {0, 270, 0},\r\n    scale = {0.12, 0.12, 0.12},\r\n    font_size = 400,\r\n    width = 0,\r\n    height = 0,\r\n    font_color = activePlayer.color\r\n  })\r\n  inactivityTimerIdenfitier = Wait.time(inactivityTicker,1,-1)\r\n\r\n  AllButtons.forfeitGame.edit({\r\n  click_function = \"forfeitGame\",\r\n  function_owner = self,\r\n  label = \"Forfeit\",\r\n  position = {-2.3, 0.02, -0.57},\r\n  rotation = {0, 270, 0},\r\n  scale = {0.15, 0.15, 0.15},\r\n  width = 1400,\r\n  height = 450,\r\n  font_size = 400})\r\n  \r\n  AllButtons.currentTurnMarker.edit({\r\n    click_function = \"nilFunction\",\r\n    function_owner = self,\r\n    label = \"←\",\r\n    position = {0.98 + ((buttonReach-1) * -0.327), 0.02, -0.7},\r\n    rotation = {0, 270, 0},\r\n    scale = {0.75,1,1},\r\n    width = 0,\r\n    height = 0,\r\n    font_size = 150,\r\n    fontStyle = \"Bold\",\r\n    font_color = {1,1,1,1}\r\n  })\r\n\r\n  self.setDescription(\"Current Player: \" .. Player[color].steam_name)\r\n  safePrintToColor(\"[FF11FF][Mastermind][-] I have created a hidden pattern of marbles!\", color, \"White\")\r\n  safePrintToColor(\"[FF11FF][Mastermind][-] You have to guess the correct pattern!\", color, \"White\")\r\n  safePrintToColor(\"[FF11FF][Mastermind][-] Once you create a guess I will provide feedback in small black & white pegs!\", color, \"White\")\r\n  safePrintToColor(\"[FF11FF][Mastermind][-] Black means you have a correct color in the correct position.\", color, \"White\")\r\n  safePrintToColor(\"[FF11FF][Mastermind][-] White means you have a correct color but in the wrong position.\", color, \"White\")\r\n\r\n  getUnityChildren().getChild(\"color_glass\").getChild(\"result_1\").getComponent(\"MeshRenderer\").set(\"enabled\", true)\r\n  getUnityChildren().getChild(\"color_glass\").getChild(\"result_2\").getComponent(\"MeshRenderer\").set(\"enabled\", true)\r\n  getUnityChildren().getChild(\"color_glass\").getChild(\"result_3\").getComponent(\"MeshRenderer\").set(\"enabled\", true)\r\n  getUnityChildren().getChild(\"color_glass\").getChild(\"result_4\").getComponent(\"MeshRenderer\").set(\"enabled\", true)\r\n  createHiddenPattern()\r\nend\r\n\r\nfunction forfeitGame(obj, color)\r\n  -- if timer is running, color is not the player playing, and the current player is in the lobby then refuse to forfeit\r\n  if not forfeitable and activePlayer != nil and activePlayer.steam_id ~= Player[color].steam_id and getPlayerById(activePlayer.steam_id) != nil then\r\n    safePrintToColor(\"[FF11FF][Mastermind][-] You aren't the current active player.\", color, \"Red\")\r\n    return\r\n  end\r\n  gameOver()\r\nend\r\n\r\nfunction createHiddenPattern()\r\n  if(repeatingAllowed) then\r\n    hiddenPattern[1] = rangeOfColors[math.random(1, #rangeOfColors)]\r\n    hiddenPattern[2] = rangeOfColors[math.random(1, #rangeOfColors)]\r\n    hiddenPattern[3] = rangeOfColors[math.random(1, #rangeOfColors)]\r\n    hiddenPattern[4] = rangeOfColors[math.random(1, #rangeOfColors)]\r\n  else\r\n    possibleColors = cloneArray(rangeOfColors)\r\n    hiddenPattern[1] = table.remove(possibleColors,math.random(1, #possibleColors))\r\n    hiddenPattern[2] = table.remove(possibleColors,math.random(1, #possibleColors))\r\n    hiddenPattern[3] = table.remove(possibleColors,math.random(1, #possibleColors))\r\n    hiddenPattern[4] = table.remove(possibleColors,math.random(1, #possibleColors))\r\n  end\r\nend\r\n\r\nfunction submitGuess(obj, color)\r\n  Wait.time(function() realSubmitGuess(obj, color) end, 0.15, 1)\r\nend\r\nfunction realSubmitGuess(obj, color)\r\n  if(activePlayer.steam_id ~= Player[color].steam_id) and not forfeitable then\r\n    safePrintToColor(\"[FF11FF][Mastermind][-] You aren't the current active player.\", color, \"Red\")\r\n    return\r\n  end\r\n  inactivitySeconds = INACTIVITY_SECONDS\r\n\r\n  local correct, semicorrect\r\n  if loaded_possibilities and iterPopulateHardModePossibilities_wait[buttonReach] == nil and hardModePins[buttonReach] != nil then\r\n    hiddenPattern = hardModeHiddenPattern\r\n    correct, semicorrect = hardModePins[buttonReach][1], hardModePins[buttonReach][2]\r\n    for i = 1, correct + semicorrect do\r\n      setPin(buttonReach, i, i <= correct and \"black\" or \"white\")\r\n    end\r\n    processPins(correct, semicorrect)\r\n  else\r\n    correct, semicorrect = comparePatternArrays(hiddenPattern,currentGuess)\r\n    hardModePins[buttonReach] = {correct, semicorrect}\r\n    --print(buttonReach .. \" doing non hardmode turn \" .. correct .. semicorrect .. \" for \" .. arrayToString(hiddenPattern))\r\n    processPins(correct, semicorrect)\r\n  end\r\n  \r\n  if correct == 4 then\r\n    wonGame()\r\n    return\r\n  end\r\n  \r\n  buttonReach = buttonReach+1\r\n\r\n  AllButtons.submitGuess.clear()\r\n  AllButtons.currentTurnMarker.edit({\r\n    click_function = \"nilFunction\",\r\n    function_owner = self,\r\n    label = \"←\",\r\n    position = {0.98 + ((buttonReach-1) * -0.327), 0.02, -0.7},\r\n    rotation = {0, 270, 0},\r\n    scale = {0.75,1,1},\r\n    width = 0,\r\n    height = 0,\r\n    font_size = 150,\r\n    fontStyle = \"Bold\",\r\n    font_color = {1,1,1,1}\r\n  })\r\n\r\n  table.insert(previousGuesses,currentGuess)\r\n  currentGuess = {\"none\",\"none\",\"none\",\"none\"}\r\n\r\n  if(buttonReach == 11 and isGameRunning) then\r\n    playerLost()\r\n  end\r\nend\r\n\r\nfunction comparePatternStrings(p1, p2)\r\n  local correct = 0\r\n  local semicorrect = 0\r\n  \r\n  if string.len(p1) == 0 or string.len(p2) == 0 then\r\n    error(\"Mastermind comparePatternStrings(): pattern has zero length\")\r\n  elseif string.len(p1) != string.len(p2) then\r\n    error(\"Mastermind comparePatternStrings(): patterns have different lengths\")\r\n  end\r\n  \r\n  for i = string.len(p1), 1, -1 do\r\n    if string.sub(p1,i,i) == string.sub(p2,i,i) then\r\n      p1 = string.sub(p1,0,i-1) .. string.sub(p1,i+1,-1)\r\n      p2 = string.sub(p2,0,i-1) .. string.sub(p2,i+1,-1)\r\n      correct = correct + 1\r\n    end\r\n  end\r\n  for i = string.len(p1), 1, -1 do\r\n    j, _ = string.find(p2, string.sub(p1,i,i), 1, true)\r\n    if j != nil then\r\n      p1 = string.sub(p1,0,i-1) .. string.sub(p1,i+1,-1)\r\n      p2 = string.sub(p2,0,j-1) .. string.sub(p2,j+1,-1)\r\n      semicorrect = semicorrect + 1\r\n    end\r\n  end\r\n  \r\n  return correct, semicorrect\r\nend\r\n\r\nfunction comparePatternArrays(p1, p2)\r\n  if #p1 == 0 or #p2 == 0 then\r\n    error(\"Mastermind comparePatternArrays(): pattern has zero length\")\r\n  elseif #p1 != #p2 then\r\n    error(\"Mastermind comparePatternArrays(): patterns have different lengths\")\r\n  end\r\n  local p1 = cloneArray(p1)\r\n  local p2 = cloneArray(p2)\r\n  local correct = 0\r\n  local semicorrect = 0\r\n  \r\n  \r\n  for i = #p1, 1, -1 do\r\n    if p1[i] == p2[i] then\r\n      table.remove(p1,i)\r\n      table.remove(p2,i)\r\n      correct = correct + 1\r\n    end\r\n  end\r\n  for i = #p1, 1, -1 do\r\n    ind = findInArray(p1[i], p2)\r\n    if ind != nil then\r\n      table.remove(p1,i)\r\n      table.remove(p2,ind)\r\n      semicorrect = semicorrect + 1\r\n    end\r\n  end\r\n  \r\n  return correct, semicorrect\r\nend\r\n\r\nfunction processPins(correct, semicorrect)\r\n  \r\n  for i = 1, correct + semicorrect do\r\n    setPin(buttonReach, i, i <= correct and \"black\" or \"white\")\r\n  end\r\n  table.insert(previousResults,{correct, semicorrect})\r\n\r\n\r\n\r\n  --if correct == 0 and semicorrect == 0 then\r\n  --  safePrintToColor(\"[FF11FF][Mastermind][-] [00FFFF](\" .. buttonReach .. \"/10)[-] none of the guessed colors are in the answer.\", activePlayer.color, \"White\")\r\n  --end\r\n  \r\n  turn_text = \"(\" .. buttonReach .. \"/10)\"\r\n  if correct != 0 or semicorrect == 0 then\r\n    plural = correct != 1 and \"s\" or \"\"\r\n    safePrintToColor(\"[FF11FF][Mastermind][-] [00FFFF]\" .. turn_text .. \"[-] \" .. correct .. \" correct color\" .. plural .. \" and position\" .. plural .. \".\", activePlayer.color, \"White\")\r\n    turn_text = \"\"\r\n  end\r\n\r\n  if semicorrect != 0 then\r\n    plural = semicorrect != 1 and \"s\" or \"\"\r\n    safePrintToColor(\"[FF11FF][Mastermind][-][00FFFF]\" .. turn_text .. \"[-] \" .. semicorrect .. \" correct color\" .. plural .. \" but wrong position\" .. plural .. \".\", activePlayer.color, \"White\")\r\n  end\r\n  \r\nend\r\n\r\nfunction arrayToString(arr)\r\n  local pat = \"\"\r\n  for _, c in pairs(arr) do\r\n    ind = findInArray(c,rangeOfColors)\r\n    if ind == nil then\r\n      error(\"Mastermind arrayToString(): array of colors contains a color not available: \" .. tostring(c))\r\n    end\r\n    pat = pat .. tostring(ind)\r\n  end\r\n  return pat\r\nend\r\n\r\nfunction stringToArray(pat)\r\n  local arr = {}\r\n  for i = 1, string.len(pat) do\r\n    ind = tonumber(string.sub(pat,i,i))\r\n    if ind == nil or ind < 1 or ind > #rangeOfColors then\r\n      error(\"Mastermind stringToArray(): pattern of colors contains an invalid index: \" .. tostring(pat))\r\n    end\r\n    table.insert(arr,rangeOfColors[ind])\r\n  end\r\n  return arr\r\nend\r\n\r\nfunction gameOver()\r\n  --print(\"gameOver\")\r\n  if inactivityTimerIdenfitier != nil then\r\n    Wait.stop(inactivityTimerIdenfitier)\r\n    inactivityTimerIdenfitier = nil\r\n  end\r\n  \r\n  for id, val in pairs(iterPopulateHardModePossibilities_wait) do\r\n    if val != nil then\r\n      Wait.stop(val)\r\n    end\r\n  end\r\n  iterPopulateHardModePossibilities_wait = {}\r\n  hardModePins = {}\r\n  currentHardModePossibilities = nil\r\n  iterPopulateHardModePossibilities_pattern = {}\r\n\r\n\r\n  isEnabled = {}\r\n\r\n  buttonReach = 0\r\n  setColorSelection('')\r\n  activePlayer = nil\r\n  isGameRunning = false\r\n  repeatingAllowed = true\r\n  inactiveTimerButton = nil\r\n  forfeitable = false\r\n\r\n  getUnityChildren().getChild(\"color_\" .. hiddenPattern[1]).getChild(\"result_1\").getComponent(\"MeshRenderer\").set(\"enabled\", true)\r\n  getUnityChildren().getChild(\"color_\" .. hiddenPattern[2]).getChild(\"result_2\").getComponent(\"MeshRenderer\").set(\"enabled\", true)\r\n  getUnityChildren().getChild(\"color_\" .. hiddenPattern[3]).getChild(\"result_3\").getComponent(\"MeshRenderer\").set(\"enabled\", true)\r\n  getUnityChildren().getChild(\"color_\" .. hiddenPattern[4]).getChild(\"result_4\").getComponent(\"MeshRenderer\").set(\"enabled\", true)\r\n\r\n  for i = 1, 4 do\r\n    getUnityChildren().getChild(\"color_glass\").getChild(\"result_\" .. i).getComponent(\"MeshRenderer\").set(\"enabled\", false)\r\n    local function retry(ind, attempts)\r\n      Wait.frames(function()\r\n        if getUnityChildren().getChild(\"color_glass\").getChild(\"result_\" .. ind).getComponent(\"MeshRenderer\").get(\"enabled\") then\r\n          getUnityChildren().getChild(\"color_glass\").getChild(\"result_\" .. ind).getComponent(\"MeshRenderer\").set(\"enabled\", false)\r\n          if attempts > 0 then\r\n            print(\"failed to unload glass #\", ind, \" attempts:\", attempts)\r\n          end\r\n          retry(ind, attempts + 1)\r\n        end\r\n      end, 1)\r\n    end\r\n    retry(i, 1)\r\n  end\r\n  \r\n  setButtonsToInitialState()\r\nend\r\n\r\nfunction playerLost()\r\n  safePrintToColor(\"[FF11FF][Mastermind][-] You lost, I'll show you the correct order!\", activePlayer.color, \"White\")\r\n  gameOver()\r\nend\r\n\r\nfunction wonGame()\r\n  broadcastToAll(\"[FF11FF][Mastermind][-] \" .. activePlayer.steam_name .. \" won Mastermind in \" .. tostring(buttonReach) .. \" guesses!\")\r\n  gameOver()\r\nend\r\n\r\nfunction setColorSelection(clr)\r\n  colorSelected = string.lower(clr)\r\n  if colorSelected == \"\" then\r\n    self.UI.setXml(\"\")\r\n  else\r\n    local ind = findInArray(colorSelected,rangeOfColors)\r\n    local row = math.floor((ind - 1) / 4)\r\n    local col = (ind - 1) % 4\r\n    local x = 77.2 - 27 * col\r\n    local y = -144 - 29 * row\r\n    self.UI.setXml('<Image position=\"' .. tostring(y) ..' ' .. tostring(x) ..' -1.2\" color=\"#F7F700\" type=\"Tiled\" rotation=\"0 0 90\" width=\"1494\" height=\"1494\" scale = \"0.019 0.019 1\" image=\"circle\"></Image>')\r\n  end\r\nend\r\n\r\nfunction setPin(rowIndex, pinIndex, colorPicked)\r\n  --log(\"rowresult_\" .. colorPicked)\r\n  getUnityChildren().getChild(\"rowresult_\" .. colorPicked).getChild(\"rowresult_\" .. rowIndex .. \"_\" .. pinIndex).getComponent(\"MeshRenderer\").set(\"enabled\", true)\r\nend\r\n\r\nfunction selectColor(color, buttonPresser)\r\n  if not isGameRunning then\r\n    safePrintToColor(\"[FF11FF][Mastermind][-] You must start a new game first.\", buttonPresser, \"Red\")\r\n    return\r\n  end\r\n\r\n  if activePlayer == nil then\r\n    safePrintToColor(\"[FF11FF][Mastermind][-] You must start a game first.\", buttonPresser, \"Red\")\r\n    return\r\n  end\r\n\r\n  if(activePlayer.steam_id ~= Player[buttonPresser].steam_id) and not forfeitable then\r\n    safePrintToColor(\"[FF11FF][Mastermind][-] You aren't the current active player.\", buttonPresser, \"Red\")\r\n    return\r\n  end\r\n  \r\n  inactivitySeconds = INACTIVITY_SECONDS\r\n\r\n  setColorSelection(color)\r\n  \r\n  --safePrintToColor(\"[FF11FF][Mastermind][-] [\".. colorToTint[string.lower(color)] .. \"]\" .. color .. \"[-] selected.\", activePlayer.color, \"White\")\r\nend\r\n\r\nfunction row(row, column, buttonPresser)\r\n  if not isGameRunning then\r\n    safePrintToColor(\"[FF11FF][Mastermind][-] You must start a new game first.\", buttonPresser, \"Red\")\r\n    return\r\n  end\r\n\r\n  if activePlayer == nil then\r\n    return \r\n  end\r\n\r\n  if not forfeitable and activePlayer.steam_id ~= Player[buttonPresser].steam_id and getPlayerById(activePlayer.steam_id) != nil then\r\n    safePrintToColor(\"[FF11FF][Mastermind][-] You aren't the current active player.\", buttonPresser, \"Red\")\r\n    return\r\n  end\r\n\r\n  inactivitySeconds = INACTIVITY_SECONDS\r\n  \r\n  if(row ~= buttonReach) then\r\n    if row < buttonReach then\r\n      setColorSelection(previousGuesses[row][column])\r\n    end\r\n    return\r\n  end\r\n  \r\n  \r\n  if colorSelected == \"\" then\r\n    safePrintToColor(\"[FF11FF][Mastermind][-] Select a color first.\", activePlayer.color, \"Red\")\r\n    return\r\n  end\r\n\r\n  --log(\"Row: \" .. row)\r\n  --log(\"Column: \" .. column)\r\n  --log(getUnityChildren().getChildren())\r\n  --log(childrenKeys[colorSelected])\r\n  local entry = \"row_\"..row..\"_\"..column\r\n\r\n  if isEnabled[entry] ~= nil then\r\n    getUnityChildren().getChildren()[childrenKeys[isEnabled[entry]]].getChild(entry).getComponent(\"MeshRenderer\").set(\"enabled\", false)\r\n  end\r\n  \r\n  if isEnabled[entry] == colorSelected then\r\n    isEnabled[entry] = nil\r\n    currentGuess[column] = \"none\"\r\n  else\r\n    getUnityChildren().getChildren()[childrenKeys[colorSelected]].getChild(entry).getComponent(\"MeshRenderer\").set(\"enabled\", true)\r\n    isEnabled[entry] = colorSelected\r\n    currentGuess[column] = colorSelected\r\n  end\r\n\r\n  if findInArray(\"none\",currentGuess) == nil then\r\n    local pattern = arrayToString(currentGuess)\r\n    \r\n    -- check if we should recalculate the possibilities for the pattern the player could submit\r\n    if pattern != iterPopulateHardModePossibilities_pattern[buttonReach] then\r\n      stopCurrentPossibilitiesCalculation()\r\n      \r\n      startPossibilitiesCalculation(buttonReach, pattern)\r\n      \r\n    end\r\n    AllButtons.currentTurnMarker.clear()\r\n    AllButtons.submitGuess.edit({\r\n      click_function = \"submitGuess\",\r\n      function_owner = self,\r\n      label = \"Submit\\nGuess\",\r\n      position = {0.98 + ((buttonReach-1) * -0.327), 0.02, -0.7},\r\n      rotation = {0, 270, 0},\r\n      scale = {0.05, 0.05, 0.05},\r\n      width = 2100,\r\n      height = 1450,\r\n      font_size = 600\r\n    })\r\n  else\r\n    AllButtons.submitGuess.clear()\r\n    AllButtons.currentTurnMarker.edit({\r\n      click_function = \"nilFunction\",\r\n      function_owner = self,\r\n      label = \"←\",\r\n      position = {0.98 + ((buttonReach-1) * -0.327), 0.02, -0.7},\r\n      rotation = {0, 270, 0},\r\n      scale = {0.75,1,1},\r\n      width = 0,\r\n      height = 0,\r\n      font_size = 150,\r\n      fontStyle = \"Bold\",\r\n      font_color = {1,1,1,1}\r\n    })  \r\n  end\r\nend\r\n\r\nfunction row_1_1(obj, color)\r\nrow(1,1, color)\r\nend\r\nfunction row_1_2(obj, color)\r\nrow(1,2, color)\r\nend\r\nfunction row_1_3(obj, color)\r\nrow(1,3, color)\r\nend\r\nfunction row_1_4(obj, color)\r\nrow(1,4, color)\r\nend\r\nfunction row_2_1(obj, color)\r\nrow(2,1, color)\r\nend\r\nfunction row_2_2(obj, color)\r\nrow(2,2, color)\r\nend\r\nfunction row_2_3(obj, color)\r\nrow(2,3, color)\r\nend\r\nfunction row_2_4(obj, color)\r\nrow(2,4, color)\r\nend\r\nfunction row_3_1(obj, color)\r\nrow(3,1, color)\r\nend\r\nfunction row_3_2(obj, color)\r\nrow(3,2, color)\r\nend\r\nfunction row_3_3(obj, color)\r\nrow(3,3, color)\r\nend\r\nfunction row_3_4(obj, color)\r\nrow(3,4, color)\r\nend\r\nfunction row_4_1(obj, color)\r\nrow(4,1, color)\r\nend\r\nfunction row_4_2(obj, color)\r\nrow(4,2, color)\r\nend\r\nfunction row_4_3(obj, color)\r\nrow(4,3, color)\r\nend\r\nfunction row_4_4(obj, color)\r\nrow(4,4, color)\r\nend\r\nfunction row_5_1(obj, color)\r\nrow(5,1, color)\r\nend\r\nfunction row_5_2(obj, color)\r\nrow(5,2, color)\r\nend\r\nfunction row_5_3(obj, color)\r\nrow(5,3, color)\r\nend\r\nfunction row_5_4(obj, color)\r\nrow(5,4, color)\r\nend\r\nfunction row_6_1(obj, color)\r\nrow(6,1, color)\r\nend\r\nfunction row_6_2(obj, color)\r\nrow(6,2, color)\r\nend\r\nfunction row_6_3(obj, color)\r\nrow(6,3, color)\r\nend\r\nfunction row_6_4(obj, color)\r\nrow(6,4, color)\r\nend\r\nfunction row_7_1(obj, color)\r\nrow(7,1, color)\r\nend\r\nfunction row_7_2(obj, color)\r\nrow(7,2, color)\r\nend\r\nfunction row_7_3(obj, color)\r\nrow(7,3, color)\r\nend\r\nfunction row_7_4(obj, color)\r\nrow(7,4, color)\r\nend\r\nfunction row_8_1(obj, color)\r\nrow(8,1, color)\r\nend\r\nfunction row_8_2(obj, color)\r\nrow(8,2, color)\r\nend\r\nfunction row_8_3(obj, color)\r\nrow(8,3, color)\r\nend\r\nfunction row_8_4(obj, color)\r\nrow(8,4, color)\r\nend\r\nfunction row_9_1(obj, color)\r\nrow(9,1, color)\r\nend\r\nfunction row_9_2(obj, color)\r\nrow(9,2, color)\r\nend\r\nfunction row_9_3(obj, color)\r\nrow(9,3, color)\r\nend\r\nfunction row_9_4(obj, color)\r\nrow(9,4, color)\r\nend\r\nfunction row_10_1(obj, color)\r\nrow(10,1, color)\r\nend\r\nfunction row_10_2(obj, color)\r\nrow(10,2, color)\r\nend\r\nfunction row_10_3(obj, color)\r\nrow(10,3, color)\r\nend\r\nfunction row_10_4(obj, color)\r\nrow(10,4, color)\r\nend\r\n\r\nfunction select_red(obj, color)\r\nselectColor('Red', color)\r\nend\r\n\r\nfunction select_blue(obj, color)\r\nselectColor('Blue', color)\r\nend\r\n\r\nfunction select_green(obj, color)\r\nselectColor('Green', color)\r\nend\r\n\r\nfunction select_orange(obj, color)\r\nselectColor('Orange', color)\r\nend\r\n\r\nfunction select_purple(obj, color)\r\nselectColor('Purple', color)\r\nend\r\n\r\nfunction select_yellow(obj, color)\r\nselectColor('Yellow', color)\r\nend\r\n\r\nfunction select_brown(obj, color)\r\nselectColor('Brown', color)\r\nend\r\n\r\nfunction select_teal(obj, color)\r\nselectColor('Teal', color)\r\nend\r\n\r\nmath.randomseed(os.time()) -- so that the results are always different\r\nfunction InplaceShuffle( arr )\r\n    for i = #arr, 1, -1 do\r\n        local j = math.random(i)\r\n        arr[i], arr[j] = arr[j], arr[i]\r\n    end\r\n    return arr\r\nend\r\n\r\nfunction uuid()\r\n    local template ='xxxxxxxx'\r\n    return string.gsub(template, '[xy]', function (c)\r\n        local v = (c == 'x') and math.random(0, 0xf) or math.random(8, 0xb)\r\n        return string.format('%x', v)\r\n    end)\r\nend\r\n",
      "LuaScriptState": "{\"activePlayer\":{\"color\":\"Yellow\",\"steam_id\":\"76561198375295184\",\"steam_name\":\"Amarillyde\"},\"buttonReach\":10,\"colorSelected\":\"red\",\"currentGuess\":[\"none\",\"none\",\"none\",\"none\"],\"forfeitable\":false,\"hiddenPattern\":[\"green\",\"brown\",\"red\",\"purple\"],\"isEnabled\":{\"row_1_1\":\"red\",\"row_1_2\":\"blue\",\"row_1_3\":\"green\",\"row_1_4\":\"orange\",\"row_2_1\":\"red\",\"row_2_2\":\"blue\",\"row_2_3\":\"brown\",\"row_2_4\":\"teal\",\"row_3_1\":\"brown\",\"row_3_2\":\"teal\",\"row_3_3\":\"green\",\"row_3_4\":\"orange\",\"row_4_1\":\"red\",\"row_4_2\":\"red\",\"row_4_3\":\"yellow\",\"row_4_4\":\"yellow\",\"row_5_1\":\"teal\",\"row_5_2\":\"orange\",\"row_5_3\":\"red\",\"row_5_4\":\"brown\",\"row_6_1\":\"orange\",\"row_6_2\":\"purple\",\"row_6_3\":\"red\",\"row_6_4\":\"blue\",\"row_7_1\":\"brown\",\"row_7_2\":\"brown\",\"row_7_3\":\"teal\",\"row_7_4\":\"teal\",\"row_8_1\":\"purple\",\"row_8_2\":\"green\",\"row_8_3\":\"red\",\"row_8_4\":\"teal\",\"row_9_1\":\"blue\",\"row_9_2\":\"purple\",\"row_9_3\":\"teal\",\"row_9_4\":\"red\"},\"isGameRunning\":false,\"previousGuesses\":[[\"red\",\"blue\",\"green\",\"orange\"],[\"red\",\"blue\",\"brown\",\"teal\"],[\"brown\",\"teal\",\"green\",\"orange\"],[\"red\",\"red\",\"yellow\",\"yellow\"],[\"teal\",\"orange\",\"red\",\"brown\"],[\"orange\",\"purple\",\"red\",\"blue\"],[\"brown\",\"brown\",\"teal\",\"teal\"],[\"purple\",\"green\",\"red\",\"teal\"],[\"blue\",\"purple\",\"teal\",\"red\"]],\"previousResults\":[[0,2],[0,2],[0,2],[0,1],[1,1],[1,1],[1,0],[1,2],[0,2]],\"repeatingAllowed\":false,\"timeSaved\":1738028855.96689}",
      "XmlUI": "",
      "CustomUIAssets": [
        {
          "Type": 0,
          "Name": "circle",
          "URL": "https://steamusercontent-a.akamaihd.net/ugc/1851541829143662021/1D2C9FF3A829710A8DDF98600EC734F071E3ACD9/"
        }
      ]
    },
    {
      "GUID": "13ea1e",
      "Name": "BlockSquare",
      "Transform": {
        "posX": -4.964972,
        "posY": 3.0028913,
        "posZ": -24.2351837,
        "rotX": 355.32193,
        "rotY": 359.97757,
        "rotZ": 0.000318708335,
        "scaleX": 7.227725,
        "scaleY": 0.1445545,
        "scaleZ": 7.227725
      },
      "Nickname": "Nonogram",
      "Description": "v0.3 by Ugleh",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0,
        "y": 0,
        "z": 0
      },
      "ColorDiffuse": {
        "r": 0.158536345,
        "g": 0.158536345,
        "b": 0.158536345
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "LuaScript": "webData = nil\r\nnongramGrid = {}\r\nmarkedSquares = {}\r\nmarkedSquaresButXisZero = {}\r\nactivePlayerId = nil\r\nactivePlayerColor = nil\r\ngameFinished = false\r\n\r\nGLOBAL_SCALE = 0.025 * 0.78\r\nBUTTON_SEPERATION = 0.105 * 0.78\r\nCOLUMN_SEPERATION = 0.160 * 0.78\r\nRESETBOARD_ZOFFSET = -0.53\r\nX_OFFSET = -0.17\r\nZ_OFFSET = -0.17\r\n\r\nfunction onLoad()\r\n    generateNonogramGrid(false)\r\nend\r\n\r\nfunction andThen()\r\n    for i = 1, 10 do\r\n        for j = 1, 10 do\r\n            markedSquaresButXisZero = markedSquaresButXisZero or {}\r\n            markedSquaresButXisZero[i] = markedSquaresButXisZero[i] or {}\r\n            markedSquaresButXisZero[i][j] = \"0\"\r\n\r\n            local functionName = \"clickBox_\" .. i .. \"_\" .. j\r\n            local data = {click_function = functionName, function_owner = self, label = \" \", position = {0.45 + X_OFFSET, 0.6, 0.45 + Z_OFFSET}, rotation = {0, 180, 0}, scale = {GLOBAL_SCALE, GLOBAL_SCALE, GLOBAL_SCALE}, width = 2000, height = 2000, font_size = 1400}\r\n            data.position[1] = data.position[1] - (i - 1) * BUTTON_SEPERATION\r\n            data.position[3] = data.position[3] - (j - 1) * BUTTON_SEPERATION\r\n            self.createButton(data)\r\n            _G[functionName] = function(obj, color, alt) boxClicked(obj, color, alt, i, j) end\r\n        end\r\n    end\r\n\r\n    local numScale = {GLOBAL_SCALE, GLOBAL_SCALE, GLOBAL_SCALE}\r\n    -- buttons for column clues\r\n    for i = 1, 10 do\r\n        local functionName = \"markColumnRed_\" .. i\r\n        local data = {click_function = functionName, function_owner = self, label = getCluesForColumn(i), position = {0.45 + X_OFFSET, 0.6, 0.45 + Z_OFFSET}, rotation = {0, 180, 0}, scale = numScale, width = 2000, height = 4000, font_size = 1000}\r\n        data.position[1] = data.position[1] - (i - 1) * BUTTON_SEPERATION\r\n        data.position[3] = data.position[3] + COLUMN_SEPERATION\r\n        data.color = {1, 1, 1}\r\n        self.createButton(data)\r\n        _G[functionName] = function(obj, color, alt) markColumnRed(obj, color, alt, i) end\r\n    end\r\n    -- buttons for row clues\r\n    for i = 1, 10 do\r\n        local functionName = \"markRowRed_\" .. i\r\n        local data = {click_function = functionName, function_owner = self, label = getCluesForRow(i), position = {0.45 + X_OFFSET, 0.6, 0.45 + Z_OFFSET}, rotation = {0, 180, 0}, scale = numScale, width = 4000, height = 2000, font_size = 1000}\r\n        data.position[1] = data.position[1] + COLUMN_SEPERATION\r\n        data.position[3] = data.position[3] - (i - 1) * BUTTON_SEPERATION\r\n        data.color = {1, 1, 1}\r\n        self.createButton(data)\r\n        _G[functionName] = function(obj, color, alt) markRowRed(obj, color, alt, i) end\r\n    end\r\n\r\n    local data = {click_function = \"resetBoard\", color = {0,0,0,0}, scale = {0, 0, 0}, function_owner = self, label = \"Reset Board\", position = {0, 0.6, RESETBOARD_ZOFFSET}, rotation = {0, 180, 0}, width = 20000, height = 2000, font_size = 1400, tooltip = \"Click for a new game\"}\r\n    self.createButton(data)\r\nend\r\n\r\nmarkedColumns = {false, false, false, false, false, false, false, false, false, false}\r\nmarkedRows = {false, false, false, false, false, false, false, false, false, false}\r\n\r\nfunction markColumnRed(obj, playerColor, alt, column)\r\n    if gameFinished then\r\n        printToColor(\"The game is already finished!\", playerColor)\r\n        return\r\n    end\r\n\r\n    if activePlayerId ~= Player[playerColor].steam_id then\r\n        printToColor(\"It is not your turn!\", playerColor)\r\n        return\r\n    end\r\n    markedColumns[column] = not markedColumns[column]\r\n    local fontColor = {(markedColumns[column] and 1 or 0), 0, 0}\r\n    local data = {index = 100 + column - 1, font_color = fontColor}\r\n    obj.editButton(data)\r\nend\r\n\r\nfunction markRowRed(obj, playerColor, alt, row)\r\n    if gameFinished then\r\n        printToColor(\"The game is already finished!\", playerColor)\r\n        return\r\n    end\r\n\r\n    if activePlayerId ~= Player[playerColor].steam_id then\r\n        printToColor(\"It is not your turn!\", playerColor)\r\n        return\r\n    end\r\n    markedRows[row] = not markedRows[row]\r\n    local fontColor = {(markedRows[row] and 1 or 0), 0, 0}\r\n    local data = {index = 110 + row - 1, font_color = fontColor}\r\n    obj.editButton(data)\r\nend\r\n\r\nfunction resetBoard(obj, playerColor)\r\n    if (activePlayerId ~= nil and activePlayerId ~= Player[playerColor].steam_id) then\r\n        printToColor(\"It is not your turn!\", playerColor)\r\n        return\r\n    end\r\n    --Hide last button with 0 scale\r\n    local data = {index = #self.getButtons() - 1, scale = {0, 0, 0}}\r\n    self.editButton(data)\r\n    nongramGrid = {}\r\n    markedSquares = {}\r\n    markedSquaresButXisZero = {}\r\n    activePlayerId = nil\r\n    activePlayerColor = nil\r\n    gameFinished = false\r\n    markedColumns = {false, false, false, false, false, false, false, false, false, false}\r\n    markedRows = {false, false, false, false, false, false, false, false, false, false}\r\n    generateNonogramGrid(true)\r\n    andThenAswell()\r\nend\r\n\r\nfunction andThenAswell()\r\n    markedSquaresButXisZero = markedSquaresButXisZero or {}\r\n    for i = 1, 10 do\r\n        markedSquaresButXisZero[i] = markedSquaresButXisZero[i] or {}\r\n        for j = 1, 10 do\r\n            markedSquaresButXisZero[i][j] = \"0\"\r\n            local calcIndex = (i - 1) * 10 + j\r\n            local possibleButton = possibleButtons[\"0\"]\r\n            local data = {index = calcIndex - 1, color = possibleButton.color, label = possibleButton.label, font_color = possibleButton.font_color}\r\n            self.editButton(data)\r\n        end\r\n    end\r\n\r\n    -- modify the column clues\r\n    for i = 1, 10 do\r\n        local data = {index = 99 + i, label = getCluesForColumn(i), font_color = {0, 0, 0}}\r\n        self.editButton(data)\r\n    end\r\n    -- modify the row clues\r\n    for i = 1, 10 do\r\n        local data = {index = 109 + i, label = getCluesForRow(i), font_color = {0, 0, 0}}\r\n        self.editButton(data)\r\n    end\r\nend\r\n\r\npossibleButtons = {}\r\npossibleButtons[\"1\"] = {color = {0, 0, 0}, label = \"\", font_color = {0, 0, 0}}\r\npossibleButtons[\"0\"] = {color = {1, 1, 1}, label = \"\", font_color = {0, 0, 0}}\r\npossibleButtons[\"X\"] = {color = {1, 1, 1}, label = \"X\", font_color = {1, 0, 0}}\r\n\r\nfunction onPlayerChangeColor(newColor)\r\n    if Player[newColor].steam_id == activePlayerId then\r\n        activePlayerColor = newColor\r\n    end\r\nend\r\n\r\nfunction boxClicked(obj, playerColor, alt, i, j)\r\n    if gameFinished then\r\n        printToColor(\"The game is already finished!\", playerColor)\r\n        return\r\n    end\r\n    if activePlayerId == nil  then\r\n        activePlayerId = Player[playerColor].steam_id\r\n        activePlayerColor = playerColor\r\n        -- edit last button\r\n        local data = {index = #self.getButtons() - 1, color = {0, 0, 0}, scale = {GLOBAL_SCALE, GLOBAL_SCALE, GLOBAL_SCALE}, label = Player[playerColor].steam_name .. \" is playing\", font_color = {1, 1, 1}}\r\n        self.editButton(data)\r\n    end\r\n    if activePlayerId ~= Player[playerColor].steam_id then\r\n        printToColor(\"It is not your turn!\", playerColor)\r\n        return\r\n    end\r\n\r\n    markedSquares[i] = markedSquares[i] or {}\r\n    if (markedSquares[i][j] == nil or markedSquares[i][j] == \"0\") and not alt then\r\n        markedSquares[i][j] = \"1\"\r\n    elseif (markedSquares[i][j] == nil or markedSquares[i][j] == \"0\") and alt then\r\n        markedSquares[i][j] = \"X\"\r\n    elseif markedSquares[i][j] == \"1\" and not alt then\r\n        markedSquares[i][j] = \"0\"\r\n    elseif markedSquares[i][j] == \"1\" and alt then\r\n        markedSquares[i][j] = \"0\"\r\n    elseif markedSquares[i][j] == \"X\" then\r\n        markedSquares[i][j] = \"0\"\r\n    end\r\n\r\n    markedSquaresButXisZero[i] = markedSquaresButXisZero[i] or {}\r\n    if markedSquares[i][j] == \"X\" then\r\n        markedSquaresButXisZero[i][j] = \"0\"\r\n    else\r\n        markedSquaresButXisZero[i][j] = markedSquares[i][j]\r\n    end\r\n\r\n    local calcIndex = (i - 1) * 10 + j\r\n    local possibleButton = possibleButtons[markedSquares[i][j]]\r\n    local data = {index = calcIndex - 1, color = possibleButton.color, label = possibleButton.label, font_color = possibleButton.font_color}\r\n    obj.editButton(data)\r\n    checkSolved()\r\nend\r\nfunction checkSolved()\r\n    local allRowsCorrect = true\r\n    local allColumnsCorrect = true\r\n\r\n    for i = 1, 10 do\r\n        local row = markedSquaresButXisZero[i]\r\n        local gridRow = nongramGrid[i]\r\n        if table.concat(row, \",\") ~= table.concat(gridRow, \",\") then\r\n            allRowsCorrect = false\r\n            break\r\n        end\r\n    end\r\n\r\n    for i = 1, 10 do\r\n        local column = {}\r\n        for j = 1, 10 do\r\n            table.insert(column, markedSquaresButXisZero[j][i])\r\n        end\r\n        local gridColumn = {}\r\n        for j = 1, 10 do\r\n            table.insert(gridColumn, nongramGrid[j][i])\r\n        end\r\n        if table.concat(column, \",\") ~= table.concat(gridColumn, \",\") then\r\n            allColumnsCorrect = false\r\n            break\r\n        end\r\n    end\r\n\r\n    if allRowsCorrect or allColumnsCorrect then\r\n        printToColor(\"You have solved the puzzle!\", activePlayerColor)\r\n        gameFinished = true\r\n        activePlayerId = nil\r\n        activePlayerColor = nil\r\n        -- Edit last button\r\n        local data = {index = #self.getButtons() - 1, color = {0, 0, 0}, scale = {GLOBAL_SCALE, GLOBAL_SCALE, GLOBAL_SCALE}, label = \"You have solved the puzzle!\", font_color = {1, 1, 1}}\r\n        self.editButton(data) \r\n    end\r\nend\r\n\r\nfunction getCluesForColumn(column)\r\n    local conString = table.concat(webData.rowClues[column], \"\\n\")\r\n    return conString\r\nend\r\n\r\nfunction getCluesForRow(row)\r\n    local conString = table.concat(webData.colClues[row], \"  \")\r\n    return conString\r\nend\r\n\r\n\r\n\r\n--[[ function generateNonogramGrid()\r\n    for i = 1, 10 do\r\n        nongramGrid[i] = {}\r\n        for j = 1, 10 do\r\n            nongramGrid[i][j] = (math.random() < 0.7) and 1 or 0\r\n        end\r\n    end\r\nend ]]\r\n\r\nfunction generateNonogramGrid(secondTime)\r\n    WebRequest.get(\"https://ugleh.com/nonogram/gen.php\", function(webReturn)\r\n        if webReturn.is_error then\r\n            printToAll(\"Error: \" .. webReturn.error)\r\n        else\r\n            local data = JSON.decode(webReturn.text)\r\n            webData = data\r\n            nongramGrid = webData.solution\r\n            if secondTime then andThenAswell()\r\n            else andThen() end\r\n        end\r\n    end)\r\nend",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "7c6cd1",
      "Name": "BlockSquare",
      "Transform": {
        "posX": -13.9392338,
        "posY": 2.79208541,
        "posZ": -13.7874641,
        "rotX": 359.496429,
        "rotY": 0.00295594614,
        "rotZ": 359.5418,
        "scaleX": 5,
        "scaleY": 0.1,
        "scaleZ": 5
      },
      "Nickname": "Minesweeper",
      "Description": "v0.4 by Ugleh\nUse the Right Click menu to change the mode",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0,
        "y": 0,
        "z": 0
      },
      "ColorDiffuse": {
        "r": 0.1882349,
        "g": 0.141176075,
        "b": 0.254901558
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "LuaScript": "squares = nil\r\nrevealed = nil\r\ngameOver = false\r\nBOMB_CHAR = \"●\"\r\nFLAG_CHAR = \"F\"\r\nCHAT_PREFIX = \"[ff00ff][Minesweeper][-] \"\r\nactivePlayer = nil\r\nactivePlayerId = nil\r\nactivityTimer = nil\r\ngameStartTime = nil\r\nseed = nil\r\n\r\nDIFFICULTY_CONFIG = {\r\n    BEGINNER = {width = 9, height = 9, bombCount = 10, buttonSeperation = 0.105, xOffset = 0.86, zOffset = 0.86, scale = {5.00, 0.10, 5.00}, buttonScale = 2000, time_limit = 250},\r\n    INTERMEDIATE = {width = 16, height = 16, bombCount = 40, buttonSeperation = 0.057, xOffset = 0.86, zOffset = 0.86, scale = {8.88, 0.10, 8.88}, buttonScale = 1111.11, time_limit = 350},\r\n    EXPERT = {width = 30, height = 16, bombCount = 99, buttonSeperation = 0.031, xOffset = 0.89, zOffset = 0.86, scale = {16.66, 0.10, 8.88}, buttonScale = 1111.11, time_limit = 450}\r\n}\r\n\r\nSELECTED_DIFFICULTY = DIFFICULTY_CONFIG.BEGINNER\r\n\r\n\r\nfunction onLoad()\r\n    self.addContextMenuItem(\"Beginner\", changeDiff_BEG)\r\n    self.addContextMenuItem(\"Intermediate\", changeDiff_INT)\r\n    --self.addContextMenuItem(\"Expert\", changeDiff_EXP)\r\n    initDesign()\r\nend\r\n\r\nfunction changeDiff_BEG(player_color, position, object)\r\n    if not (Player[player_color].promoted or Player[player_color].host) then\r\n        printToColor(CHAT_PREFIX .. \"This change can only be made by a promoted/host user!\", player_color, {1, 0.278, 0.278})\r\n        return\r\n    end\r\n    SELECTED_DIFFICULTY = DIFFICULTY_CONFIG.BEGINNER\r\n    initDesign()\r\n    resetGame(nil, player_color)\r\nend\r\nfunction changeDiff_INT(player_color, position, object)\r\n    if not (Player[player_color].promoted or Player[player_color].host) then\r\n        printToColor(CHAT_PREFIX .. \"This change can only be made by a promoted/host user!\", player_color, {1, 0.278, 0.278})\r\n        return\r\n    end\r\n    SELECTED_DIFFICULTY = DIFFICULTY_CONFIG.INTERMEDIATE\r\n    initDesign()\r\n    resetGame(nil, player_color)\r\nend\r\nfunction changeDiff_EXP(player_color, position, object)\r\n    if not (Player[player_color].promoted or Player[player_color].host) then\r\n        printToColor(CHAT_PREFIX .. \"This change can only be made by a promoted/host user!\", player_color, {1, 0.278, 0.278})\r\n        return\r\n    end\r\n    SELECTED_DIFFICULTY = DIFFICULTY_CONFIG.EXPERT\r\n    initDesign()\r\n    resetGame(nil, player_color)\r\nend\r\n\r\nfunction setSeedInput(object, playercolor, input, selected)\r\n    if input == \"\" then\r\n        seed = nil\r\n        return\r\n    end\r\n    seed = input\r\nend\r\n\r\nfunction initDesign()\r\n    self.clearButtons()\r\n    BUTTON_COUNT = SELECTED_DIFFICULTY.height * SELECTED_DIFFICULTY.width\r\n    self.setScale(SELECTED_DIFFICULTY.scale)\r\n    local buttonRescaling = SELECTED_DIFFICULTY.scale[1] / SELECTED_DIFFICULTY.scale[3]\r\n    local xOffset = SELECTED_DIFFICULTY.xOffset\r\n    local zOffset = SELECTED_DIFFICULTY.zOffset\r\n    local buttonSize = SELECTED_DIFFICULTY.buttonSeperation\r\n    local index = 1;\r\n    for x = 1, SELECTED_DIFFICULTY.width do\r\n        for y = 1, SELECTED_DIFFICULTY.height do\r\n            -- Create a button at each (x, y) coordinate\r\n            local data = {click_function = \"clickedSquare_\" .. index, function_owner = self, label = \"\", position = {xOffset - 0.44 - (x - 1) * buttonSize, 0.5, zOffset - 0.44 - (y - 1) * buttonSize * buttonRescaling}, rotation = {0, 180, 0}, scale = {0.025 / buttonRescaling, 0.025, 0.025}, width = SELECTED_DIFFICULTY.buttonScale, height = SELECTED_DIFFICULTY.buttonScale, font_size = 6000, color = {0.22, 0.251, 0.282}}\r\n            self.createButton(data)\r\n            index = index + 1;\r\n        end\r\n    end\r\n\r\n    local newXOffset = -0.138\r\n    local data = {click_function = \"null\", function_owner = self, label = string.format(\"%03d\", SELECTED_DIFFICULTY.bombCount), position = {newXOffset + 0.29, 0.5, 0.54}, rotation = {0, 180, 0}, scale = {0.045 / buttonRescaling, 0.045, 0.045}, width = 2000, height = 1000, font_size = 6000, color = {0, 0, 0}, font_color = {1, 0, 0}}\r\n    self.createButton(data)\r\n\r\n    local data = {click_function = \"resetGame\", function_owner = self, label = \"•ᴗ•\", tooltip = \"Click to reset\", position = {newXOffset + 0.135, 0.5, 0.54}, rotation = {0, 180, 0}, scale = {0.045 / buttonRescaling, 0.045, 0.045}, width = 1250, height = 1000, font_size = 6000, color = {1, 1, 0}, font_color = {0, 0, 1}}\r\n    self.createButton(data)\r\n\r\n    local data = {click_function = \"null\", function_owner = self, label = \"000\", position = {newXOffset - 0.02, 0.5, 0.54}, rotation = {0, 180, 0}, scale = {0.045 / buttonRescaling, 0.045, 0.045}, width = 2000, height = 1000, font_size = 6000, color = {0, 0, 0}, font_color = {1, 0, 0}}\r\n    self.createButton(data)\r\n\r\n    -- Active Player Stand-in display button\r\n    local data = {click_function = \"null\", function_owner = self, label = \"Unoccupied Device\", position = {0, 0.5, zOffset - 0.44 - (SELECTED_DIFFICULTY.buttonScale * 0.00001) - SELECTED_DIFFICULTY.height * buttonSize * buttonRescaling}, rotation = {0, 180, 0}, scale = {0.035 / buttonRescaling, 0.035, 0.035}, width = 12000, height = 1000, font_size = 6000, color = {0, 0, 0}, font_color = {1, 0, 0}}\r\n    self.createButton(data)\r\n\r\n    -- Seed Input Label\r\n    local data = {click_function = \"null\", function_owner = self, label = \"Set Seed\", position = {0, -1, 0.14}, rotation = {0, 180, 180}, scale = {0.075 / buttonRescaling, 0.075, 0.075}, width = 0, height = 0, font_size = 6000, color = {0, 0, 0}, font_color = {1, 0, 0}}\r\n    self.createButton(data)\r\n\r\n    --  Seed Input\r\n    local data = {input_function = \"setSeedInput\", function_owner = self, label = \"\", tooltip = \"Leave blank for random\", position = {0, -1, 0}, rotation = {0, 180, 180}, scale = {0.075 / buttonRescaling, 0.075, 0.075}, width = 5500, height = 800, font_size = 6000, color = {0, 0, 0, 1}, font_color = {0, 1, 0, 1}, alignment = 3, validation = 2}\r\n    self.createInput(data)\r\n\r\n    --use _G to create global functions userClickedSquare_1, etc\r\n    for i = 1, (BUTTON_COUNT) do\r\n        _G[\"clickedSquare_\" .. i] = function(a, b, c) clickedSquare(i, a, b, c) end\r\n    end\r\nend\r\n\r\nfunction null()\r\n\r\nend\r\n\r\nlastName = nil\r\nfunction getPlayerName(playerColor)\r\n    if playerColor == \"Grey\" then return lastName end\r\n    if Player[playerColor].steam_name == nil  then\r\n        return lastName\r\n    end\r\n    lastName = Player[playerColor].steam_name\r\n    return lastName\r\nend\r\n\r\nfunction onPlayerDisconnect(player)\r\n    if (activePlayerId == player.steam_id) then\r\n        activePlayer = nil\r\n        activePlayerId = nil\r\n        resetGame(nil, nil)\r\n    end\r\nend\r\n\r\nfunction onPlayerChangeColor(player_color)\r\n    -- change activePlayer (the players color) to the new color\r\n    -- loop through all players and check if the player_color matches the steam_id\r\n    for _, player in pairs(Player.getPlayers()) do\r\n        if player.steam_id == activePlayerId then\r\n            activePlayer = player_color\r\n            break\r\n        end\r\n    end\r\nend\r\n\r\nfunction onUpdate()\r\n    if (gameOver) then\r\n        return\r\n    end\r\n    if (activityTimer == nil) then\r\n        return\r\n    end\r\n    local time = os.time()\r\n    -- count up from activityTimer\r\n    local timeDiff = time - activityTimer\r\n    self.editButton({index = BUTTON_COUNT + 2, label = string.format(\"%03d\", time - gameStartTime)})\r\n    local timeRemaining = math.floor(SELECTED_DIFFICULTY.time_limit - timeDiff)\r\n    self.editButton({index = BUTTON_COUNT + 3, label = \"[00ff00]Occupied [ff0000](\" .. timeRemaining .. \")[-]: [-]\" .. getPlayerName(activePlayer), font_color = activePlayer})\r\n\r\n    if (timeDiff >= SELECTED_DIFFICULTY.time_limit) then\r\n        activePlayer = nil\r\n        activePlayerId = nil\r\n        self.editButton({index = BUTTON_COUNT + 3, label = \"Game Over! Time limit reached.\", font_color = {1, 0.278, 0.278}})\r\n        gameOver = true\r\n        self.editButton({index = BUTTON_COUNT + 1, label = \"x_x\", font_color = {1, 1, 0}, color = {0, 0, 1}}) -- Make smile face sad\r\n        activePlayer = nil\r\n        activePlayerId = nil\r\n        --self.editButton({index = BUTTON_COUNT + 3, label = \"Unoccupied Device.\", font_color = {1, 0, 0}})\r\n        for ix = 1, SELECTED_DIFFICULTY.width do\r\n            for iy = 1, SELECTED_DIFFICULTY.height do\r\n                if (squares[ix][iy] == \"bomb\") then\r\n                    local color = {0.227, 0.263, 0.31}\r\n                    self.editButton({index = getButtonIDFromXY(ix, iy) - 1, label = BOMB_CHAR, color = color})\r\n                end\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\nfunction resetGame(object, playerColor)\r\n    if (activePlayer ~= nil and activePlayer ~= playerColor and gameOver == false) then\r\n        printToColor(CHAT_PREFIX .. \"It's not your turn!\", playerColor, {1, 0.278, 0.278})\r\n        return\r\n    end\r\n    squares = nil\r\n    revealed = nil\r\n    gameOver = false\r\n    activityTimer = nil\r\n    activePlayer = nil\r\n    activePlayerId = nil\r\n    self.editButton({index = BUTTON_COUNT + 2, label = \"000\"})\r\n    for ix = 1, SELECTED_DIFFICULTY.width do\r\n        for iy = 1, SELECTED_DIFFICULTY.height do\r\n            self.editButton({index = getButtonIDFromXY(ix, iy) - 1, label = \"\", font_color = {0, 0, 0}, color = {0.22, 0.251, 0.282}})\r\n        end\r\n    end\r\n    self.editButton({index = BUTTON_COUNT, label = string.format(\"%03d\", SELECTED_DIFFICULTY.bombCount)}) -- Flag Count\r\n    self.editButton({index = BUTTON_COUNT + 1, label = \"•ᴗ•\", font_color = {0, 0, 1}, color = {1, 1, 0}}) -- Return smile face\r\n    self.editButton({index = BUTTON_COUNT + 3, label = \"Unoccupied Device\", font_color = {1, 0, 0}})\r\n\r\n    flagged = {}\r\n    flagCount = 0\r\n\r\nend\r\n\r\nactivityTimer = nil\r\nflagged = {}\r\nflagCount = 0\r\nfunction clickedSquare(index, object, playerColor, altClick)\r\n    if (activePlayer ~= nil and activePlayer ~= playerColor) then\r\n        printToColor(CHAT_PREFIX .. \"It's not your turn!\", playerColor, {1, 0.278, 0.278})\r\n        return\r\n    end\r\n\r\n    if (gameOver) then\r\n        printToColor(CHAT_PREFIX .. \"Game is over, please reset the board to play again.\", playerColor, {1, 0.278, 0.278})\r\n        return\r\n    end\r\n    local x, y = getXYFromButtonID(index)\r\n    --print(\"Clicked square at (\" .. x .. \",\" .. y .. \")\")\r\n    --print(\"Button ID: \" .. getButtonIDFromXY(x, y))\r\n    if (altClick) then\r\n        -- check if the square is already revealed\r\n        if revealed and not revealed[x][y] then\r\n            activityTimer = os.time()\r\n            if (not flagged[x]) then\r\n                flagged[x] = {}\r\n            end\r\n            if(not flagged[x][y]) then\r\n                flagged[x][y] = true\r\n                flagCount = flagCount + 1\r\n                local data = {index = getButtonIDFromXY(x, y) - 1, label = FLAG_CHAR, color = {1, 0.278, 0.278}}\r\n                self.editButton(data)\r\n                self.editButton({index = BUTTON_COUNT, label = string.format(\"%03d\", SELECTED_DIFFICULTY.bombCount - flagCount)}) -- Flag Count\r\n            else\r\n                flagged[x][y] = false\r\n                flagCount = flagCount - 1\r\n                local data = {index = getButtonIDFromXY(x, y) - 1, label = \"\", color = {0.22, 0.251, 0.282}}\r\n                self.editButton(data)\r\n                self.editButton({index = BUTTON_COUNT, label = string.format(\"%03d\", SELECTED_DIFFICULTY.bombCount - flagCount)}) -- Flag Count\r\n            end\r\n            self.editButton(data)\r\n        end\r\n    else\r\n        userClickedSquare(index, playerColor)\r\n    end\r\nend\r\n\r\n-- count bombs in adjacent squares\r\nfunction countAdjacentBombs(board, x, y, width, height)\r\n    local count = 0\r\n    for dx = -1, 1 do\r\n        for dy = -1, 1 do\r\n            if not (dx == 0 and dy == 0) then\r\n                local nx = x + dx\r\n                local ny = y + dy\r\n                if nx >= 1 and nx <= width and ny >= 1 and ny <= height and board[nx][ny] == \"bomb\" then\r\n                    count = count + 1\r\n                end\r\n            end\r\n        end\r\n    end\r\n    return count\r\nend\r\n\r\nfunction generateBoard(firstX, firstY)\r\n    activityTimer = os.time()\r\n    gameStartTime = os.time()\r\n    local WIDTH = SELECTED_DIFFICULTY.width\r\n    local HEIGHT = SELECTED_DIFFICULTY.height\r\n    local BOMB_COUNT = SELECTED_DIFFICULTY.bombCount\r\n\r\n    -- Initialize\r\n    local board = {}\r\n    for x = 1, WIDTH do\r\n        board[x] = {}\r\n        for y = 1, HEIGHT do\r\n            board[x][y] = 0\r\n        end\r\n    end\r\n\r\n    -- Place bombs\r\n    if seed then\r\n        math.randomseed(seed)\r\n    else\r\n        math.randomseed(os.time())\r\n    end\r\n    local bombsPlaced = 0\r\n    while bombsPlaced < BOMB_COUNT do\r\n        local randX = math.random(1, WIDTH)\r\n        local randY = math.random(1, HEIGHT)\r\n        if not (randX == firstX and randY == firstY) and board[randX][randY] ~= \"bomb\" then\r\n            board[randX][randY] = \"bomb\"\r\n            bombsPlaced = bombsPlaced + 1\r\n        end\r\n    end\r\n\r\n    -- Fill in clear/number squares\r\n    for x = 1, WIDTH do\r\n        for y = 1, HEIGHT do\r\n            if board[x][y] ~= \"bomb\" then\r\n                local adj = countAdjacentBombs(board, x, y, WIDTH, HEIGHT)\r\n                if adj == 0 then\r\n                    board[x][y] = \"clear\"\r\n                else\r\n                    board[x][y] = tostring(adj)\r\n                end\r\n            end\r\n        end\r\n    end\r\n    return board\r\nend\r\n\r\ncolorKey = {}\r\ncolorKey[\"1\"] = {0.086, 0.267, 0.584}\r\ncolorKey[\"2\"] = {0, 0.502, 0}\r\ncolorKey[\"3\"] = {0.953, 0.012, 0.02}\r\ncolorKey[\"4\"] = {0, 0, 0.494}\r\ncolorKey[\"5\"] = {0.498, 0, 0.004}\r\ncolorKey[\"6\"] = {0, 0.502, 0.498}\r\ncolorKey[\"7\"] = {0, 0, 0}\r\ncolorKey[\"8\"] = {0.502, 0.502, 0.502}\r\ncolorKey[\"bomb\"] = {0, 0, 0}\r\ncolorKey[\"clear\"] = {0, 0, 0}\r\ntextKey = {}\r\ntextKey[\"1\"] = \"1\"\r\ntextKey[\"2\"] = \"2\"\r\ntextKey[\"3\"] = \"3\"\r\ntextKey[\"4\"] = \"4\"\r\ntextKey[\"5\"] = \"5\"\r\ntextKey[\"6\"] = \"6\"\r\ntextKey[\"7\"] = \"7\"\r\ntextKey[\"8\"] = \"8\"\r\ntextKey[\"bomb\"] = BOMB_CHAR\r\ntextKey[\"clear\"] = \"\"\r\nfunction showSquare(x, y, value)\r\n    local data = {index = getButtonIDFromXY(x, y) - 1, label = textKey[value], color = {0.157, 0.176, 0.2}, font_color = colorKey[value]}\r\n    self.editButton(data)\r\nend\r\nfunction revealSquares(board, x, y, revealedState)\r\n    if revealedState[x][y] then\r\n        return\r\n    end\r\n    revealedState[x][y] = true\r\n    showSquare(x, y, board[x][y])\r\n\r\n    if board[x][y] == \"clear\" then\r\n        local width = #board\r\n        local height = #board[1]\r\n        for dx = -1, 1 do\r\n            for dy = -1, 1 do\r\n                if not (dx == 0 and dy == 0) then\r\n                    local nx = x + dx\r\n                    local ny = y + dy\r\n                    if nx >= 1 and nx <= width and ny >= 1 and ny <= height and board[nx][ny] ~= \"bomb\" then\r\n                        revealSquares(board, nx, ny, revealedState)\r\n                    end\r\n                end\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\n---------------------------------------------------------------------\r\n-- Convert (x, y) → buttonID\r\n---------------------------------------------------------------------\r\nfunction getButtonIDFromXY(x, y)\r\n    return (y - 1) * SELECTED_DIFFICULTY.width + x\r\nend\r\n\r\n---------------------------------------------------------------------\r\n-- Convert buttonID → (x, y)\r\n---------------------------------------------------------------------\r\nfunction getXYFromButtonID(buttonID)\r\n    local y = math.floor((buttonID - 1) / SELECTED_DIFFICULTY.width) + 1\r\n    local x = ((buttonID - 1) % SELECTED_DIFFICULTY.width) + 1\r\n    return x, y\r\nend\r\n\r\nfunction userClickedSquare(buttonID, playerColor)\r\n    local x, y = getXYFromButtonID(buttonID)\r\n\r\n    -- If this is the very first click of the game,\r\n    -- generate the board so that (x, y) is safe.\r\n    if squares == nil then\r\n        activePlayer = playerColor\r\n        activePlayerId = Player[playerColor].steam_id\r\n        self.editButton({index = BUTTON_COUNT + 3, label = \"[00ff00]Occupied: [-]\" .. getPlayerName(playerColor), font_color = playerColor})\r\n        squares = generateBoard(x, y)\r\n        revealed = {}\r\n        for ix = 1, SELECTED_DIFFICULTY.width do\r\n            revealed[ix] = {}\r\n            for iy = 1, SELECTED_DIFFICULTY.height do\r\n                revealed[ix][iy] = false\r\n            end\r\n        end\r\n    end\r\n    activityTimer = os.time()\r\n\r\n    -- If it's a bomb, that means game over.\r\n    if squares[x][y] == \"bomb\" then\r\n        printToColor(CHAT_PREFIX .. \"Game Over!\", playerColor, {1, 0.278, 0.278})\r\n        gameOver = true\r\n        self.editButton({index = BUTTON_COUNT + 1, label = \"x_x\", font_color = {1, 1, 0}, color = {0, 0, 1}}) -- Make smile face sad\r\n        activePlayer = nil\r\n        activePlayerId = nil\r\n        self.editButton({index = BUTTON_COUNT + 3, label = \"Unoccupied Device\", font_color = {1, 0, 0}})\r\n        for ix = 1, SELECTED_DIFFICULTY.width do\r\n            for iy = 1, SELECTED_DIFFICULTY.height do\r\n                if (squares[ix][iy] == \"bomb\") then\r\n                    local color = {0.227, 0.263, 0.31}\r\n                    if (ix == x and iy == y) then color = {1, 0, 0} end\r\n                    if ((flagged[ix] and not flagged[ix][iy]) or not flagged[ix]) then\r\n                        self.editButton({index = getButtonIDFromXY(ix, iy) - 1, label = BOMB_CHAR, color = color})\r\n                    end\r\n                end\r\n                if (flagged[ix] and flagged[ix][iy] and squares[ix][iy] ~= \"bomb\") then\r\n                    self.editButton({index = getButtonIDFromXY(ix, iy) - 1, color = {1, 0, 0}})\r\n                end\r\n            end\r\n        end\r\n        return\r\n    end\r\n\r\n    if (not gameOver) then\r\n        revealSquares(squares, x, y, revealed)\r\n    end\r\n\r\n    local revealedCount = 0\r\n    for ix = 1, SELECTED_DIFFICULTY.width do\r\n        for iy = 1, SELECTED_DIFFICULTY.height do\r\n            if revealed[ix][iy] then\r\n                revealedCount = revealedCount + 1\r\n            end\r\n        end\r\n    end\r\n    if revealedCount == (BUTTON_COUNT) - SELECTED_DIFFICULTY.bombCount then\r\n        printToColor(CHAT_PREFIX .. \"You win!\", playerColor, {0, 1, 0})\r\n        self.editButton({index = BUTTON_COUNT, label = \"000\"}) -- Flag Count\r\n        self.editButton({index = BUTTON_COUNT + 1, label = \"✧.✧\", font_color = {0.212, 0.816, 0.09}, color = {0.788, 0.184, 0.91}}) -- Make smile face happy\r\n        gameOver = true\r\n        activePlayer = nil\r\n        activePlayerId = nil\r\n        self.editButton({index = BUTTON_COUNT + 3, label = \"Unoccupied Device\", font_color = {1, 0, 0}})\r\n\r\n        -- Cover up any uncovered squares with flags\r\n        for ix = 1, SELECTED_DIFFICULTY.width do\r\n            for iy = 1, SELECTED_DIFFICULTY.height do\r\n                if not revealed[ix][iy] then\r\n                    self.editButton({index = getButtonIDFromXY(ix, iy) - 1, label = FLAG_CHAR, color = {1, 0.278, 0.278}})\r\n                end\r\n            end\r\n        end\r\n        return\r\n    end\r\nend",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "76b68a",
      "Name": "Custom_Board",
      "Transform": {
        "posX": -15.85673,
        "posY": 5.02934456,
        "posZ": -14.7060375,
        "rotX": 12.7065678,
        "rotY": 181.994385,
        "rotZ": 8.937388,
        "scaleX": 0.400000453,
        "scaleY": 0.400000453,
        "scaleZ": 0.400000453
      },
      "Nickname": "Sudoku",
      "Description": "v0.1 by Ugleh",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0,
        "y": 0,
        "z": 0
      },
      "ColorDiffuse": {
        "r": 0.7867647,
        "g": 0.7867647,
        "b": 0.7867647
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomImage": {
        "ImageURL": "https://steamusercontent-a.akamaihd.net/ugc/62587631004228780/55F3EA8691AA8A4BFFE99EC91BC117FB1142071D/",
        "ImageSecondaryURL": "",
        "ImageScalar": 1,
        "WidthScale": 1.04137933
      },
      "LuaScript": "sudoku = nil\r\nplayerEnteredSquares = {}\r\nmodifiedSquares = {}\r\n\r\ncolors = {\r\n    default = {1, 1, 1},\r\n    highlight_same_number = {0.765, 0.843, 0.918},\r\n    highlight_square = {0.886, 0.922, 0.953},\r\n    highlight_selected_square = {0.733, 0.871, 0.984},\r\n    nonstarting_font_color = {0.196, 0.353, 0.686},\r\n    starting_font_color = {0, 0, 0},\r\n    incorrect_square = {0.969, 0.812, 0.839},\r\n    incorrect_font_color = {0.898, 0.361, 0.424}\r\n}\r\nfunction onLoad()\r\n    -- Create functions for the squares (here so we dont do it again every time we generate a new board)\r\n    for i = 1, 9 do\r\n        _G[\"clickedNumber_\" .. i] = function(obj, playerColor, altClick)\r\n            clickedNumber(obj, playerColor, altClick, i)\r\n        end\r\n        for j = 1, 9 do\r\n            _G[\"clickedSquare_\" .. i .. \"_\" .. j] = function(obj, playerColor, altClick)\r\n                clickedSquare(obj, playerColor, altClick, i, j)\r\n            end\r\n        end\r\n    end\r\n\r\n    init()\r\nend\r\n\r\nfunction init()\r\n    self.clearButtons()\r\n    playerEnteredSquares = {}\r\n    sudoku = nil\r\n    WebRequest.get(\"https://sudoku-game-and-api.netlify.app/api/sudoku\", function(webReturn)\r\n        local data = JSON.decode(webReturn.text)\r\n\r\n        generateBoard(data)\r\n    end)\r\nend\r\n\r\nfunction generateBoard(data)\r\n    sudoku = {\r\n        value = data.medium,\r\n        solution = data.data\r\n    }\r\n    local Z_OFFSET = 0\r\n    local X_OFFSET = 0\r\n    -- 9x9 Sudoku Board Buttons\r\n    for i = 1, 9 do\r\n        playerEnteredSquares[i] = {}\r\n        for j = 1, 9 do\r\n            local value = sudoku.value[i][j]\r\n            playerEnteredSquares[i][j] = value\r\n            if value == 0 then value = \"\" end\r\n            local buttonData = {click_function = \"clickedSquare_\" .. i .. \"_\" .. j, function_owner = self, label = \"[b]\" .. value .. \"[-]\", position = {0, 0.6, Z_OFFSET}, rotation = {0, 0, 0}, scale = {1, 1, 1}, width = 800, height = 800, font_size = 400, color = colors.default}\r\n            buttonData.position[3] = Z_OFFSET + (i - 5) * 1.8\r\n            buttonData.position[1] = X_OFFSET + (j - 5) * 1.8\r\n             -- Artificially increase spacing because of the thicker boarders\r\n            if j > 3 and j < 6 then\r\n                buttonData.position[1] = buttonData.position[1] + 0.04\r\n            elseif j > 6 then\r\n                buttonData.position[1] = buttonData.position[1] + 0.06\r\n            end\r\n            if i > 3 and i < 6 then\r\n                buttonData.position[3] = buttonData.position[3] + 0.05\r\n            elseif i > 6 then\r\n                buttonData.position[3] = buttonData.position[3] + 0.07\r\n            end\r\n            self.createButton(buttonData)\r\n        end\r\n    end\r\n    -- 1-9 Selection Buttons\r\n    for i = 1, 9 do\r\n        local buttonData = {click_function = \"clickedNumber_\" .. i, function_owner = self, label = \"[b]\" .. i .. \"[-]\", position = {0, 0.6, -5.5}, rotation = {0, 0, 0}, scale = {1.2, 1.2, 1.2}, width = 800, height = 1100, font_size = 400, color = {0.863, 0.89, 0.929}, font_color = {0.196, 0.353, 0.686}}\r\n        buttonData.position[1] = (-4.5 * 2.24) + i * 2\r\n        buttonData.position[3] = 9.8\r\n        self.createButton(buttonData)\r\n    end\r\n    -- New Game Button\r\n    local buttonData = {click_function = \"init\", function_owner = self, label = \"[b]New Game[-]\", position = {0, 0.6, -5.5}, rotation = {0, 0, 0}, scale = {1.2, 1.2, 1.2}, width = 0, height = 0, font_size = 400, color = {0,0,0,0}, font_color = colors.incorrect_font_color}\r\n    buttonData.position[1] = 0\r\n    buttonData.position[3] = 12.2\r\n    self.createButton(buttonData)\r\nend\r\n\r\nlastSelectedSquare = nil\r\nfunction clickedSquare(object, playerColor, altClick, i, j)\r\n    -- First if a previous click exists, unhighlight those squares\r\n    if lastSelectedSquare then unhighlightAll() end\r\n\r\n    local initialValue = playerEnteredSquares[i][j]\r\n    local buttonIndex = 9 * (i -1) + j - 1\r\n\r\n    -- Set new square as last selected\r\n    lastSelectedSquare = {column = j, row = i, buttonIndex = buttonIndex, value = playerEnteredSquares[i][j], initialValue = initialValue}\r\n\r\n    -- If the square is a starting square, highlight all the numbers, box, row, and column, but do not allow editing (return)\r\n    if initialValue ~= 0 then -- Starting Square\r\n        highlightNumber(initialValue)\r\n        highlightBoxRowAndColumn(i, j, playerEnteredSquares[i][j])\r\n        return\r\n    else -- Not a starting square\r\n        highlightBoxRowAndColumn(i, j, playerEnteredSquares[i][j])\r\n    end\r\n end\r\n\r\nfunction clickedNumber(object, playerColor, altClick, value)\r\n    if not lastSelectedSquare then return end\r\n    -- If lastSelectedSquare value is the same as the value clicked, remove the value, unhighlight the squares, and return\r\n    if lastSelectedSquare.value == value then\r\n        playerEnteredSquares[lastSelectedSquare.row][lastSelectedSquare.column] = 0\r\n        lastSelectedSquare.value = 0\r\n        local buttonData = {index = lastSelectedSquare.buttonIndex, label = \"\"}\r\n        self.editButton(buttonData)\r\n        unhighlightAll()\r\n        highlightBoxRowAndColumn(lastSelectedSquare.row, lastSelectedSquare.column, value)\r\n        return\r\n    end\r\n    local i = lastSelectedSquare.row\r\n    local j = lastSelectedSquare.column\r\n    local buttonData = {index = lastSelectedSquare.buttonIndex, label = \"[b]\" .. value .. \"[-]\", font_color = colors.nonstarting_font_color}\r\n    self.editButton(buttonData)\r\n    playerEnteredSquares[i][j] = value\r\n    lastSelectedSquare.value = value\r\n    highlightNumber(value)\r\n    ifWrongHighlightWhy(i, j, value)\r\n\r\n--[[         -- Debug, say if the square is correct\r\n        if playerEnteredSquares[lastSelectedSquare.row][lastSelectedSquare.column] == sudoku.solution[i][j] then\r\n            broadcastToAll(\"Correct!\", {0, 1, 0})\r\n        else\r\n            broadcastToAll(\"Incorrect\", {1, 0, 0})\r\n        end\r\n ]]    checkIfSolved(playerColor)\r\nend\r\n\r\nfunction ifWrongHighlightWhy(i, j, value)\r\n    -- Checks the box, column, and row for the same value. If found, highlight the squares\r\n    local startingBoxIndex = {i = math.floor((j - 1) / 3) * 3 + 1, j = math.floor((i - 1) / 3) * 3 + 1}\r\n    -- column\r\n    local incorrect = false\r\n    for k = 1, 9 do\r\n        local buttonIndex = 9 * (k -1) + j - 1\r\n        if playerEnteredSquares[k][j] == value and k ~= i then\r\n            incorrect = true\r\n            local buttonData = {index = buttonIndex, color = colors.incorrect_square}\r\n            self.editButton(buttonData)\r\n        end\r\n    end\r\n    -- row\r\n    for k = 1, 9 do\r\n        local buttonIndex = 9 * (i -1) + k - 1\r\n        if playerEnteredSquares[i][k] == value and k ~= j then\r\n            incorrect = true\r\n            local buttonData = {index = buttonIndex, color = colors.incorrect_square}\r\n            self.editButton(buttonData)\r\n        end\r\n    end\r\n    -- box\r\n    for k = 0, 2 do\r\n        for l = 0, 2 do\r\n            local buttonIndex = 9 * (startingBoxIndex.j + k - 1) + startingBoxIndex.i + l - 1\r\n            if playerEnteredSquares[startingBoxIndex.j + k][startingBoxIndex.i + l] == value and (startingBoxIndex.j + k) ~= i and (startingBoxIndex.i + l) ~= j then\r\n                incorrect = true\r\n                local buttonData = {index = buttonIndex, color = colors.incorrect_square, font_color = colors.incorrect_font_color}\r\n                self.editButton(buttonData)\r\n            end\r\n        end\r\n    end\r\n    if incorrect then -- Mark the number just entered as incorrect\r\n        local buttonIndex = 9 * (i -1) + j - 1\r\n        local buttonData = {index = buttonIndex, color = colors.highlight_selected_square, font_color = colors.incorrect_font_color}\r\n        self.editButton(buttonData)\r\n    end\r\nend\r\n\r\nfunction checkIfSolved(playerColor)\r\n--[[     -- Shows a stringified version in the notes (debug)\r\n    local boardString = \"\"\r\n    local rowString = \"\"\r\n    for i = 1, 9 do\r\n        for j = 1, 9 do\r\n            rowString = rowString .. playerEnteredSquares[i][j] .. \" \"\r\n        end\r\n        boardString = boardString .. \"[\" .. rowString .. \"]\" .. \"\\n\"\r\n        rowString = \"\"\r\n    end\r\n\r\n    -- again for the solution\r\n    local solutionString = \"\"\r\n    local rowString = \"\"\r\n    for i = 1, 9 do\r\n        for j = 1, 9 do\r\n            rowString = rowString .. sudoku.solution[i][j] .. \" \"\r\n        end\r\n        solutionString = solutionString .. \"[\" .. rowString .. \"]\" .. \"\\n\"\r\n        rowString = \"\"\r\n    end\r\n\r\n    Notes.setNotes(boardString .. \"\\n\\n\" .. solutionString)\r\n ]]    -- comparing playerEnteredSquares with sudoku.solution\r\n    for i = 1, 9 do\r\n        for j = 1, 9 do\r\n            if playerEnteredSquares[i][j] ~= sudoku.solution[i][j] then\r\n                return\r\n            end\r\n        end\r\n    end\r\n    printToColor(\"Sudoku Solved!\", playerColor, {0, 1, 0})\r\n    local buttonCount = #self.getButtons()\r\n    self.editButton({index = buttonCount - 1, width = 7300, height = 800, color = colors.incorrect_square})\r\nend\r\nfunction unhighlightSquaresWithSameValue(value)\r\n    for i = 1, 9 do\r\n        for j = 1, 9 do\r\n            if playerEnteredSquares[i][j] == value then\r\n                local buttonIndex = 9 * (i -1) + j - 1\r\n                local buttonData = {index = buttonIndex, color = colors.default}\r\n                self.editButton(buttonData)\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\n function highlightNumber(value)\r\n    for i = 1, 9 do\r\n        for j = 1, 9 do\r\n            if playerEnteredSquares[i][j] == value then\r\n                local buttonIndex = 9 * (i -1) + j - 1\r\n                modifiedSquares[buttonIndex] = true\r\n                local buttonData = {index = buttonIndex, color = colors.highlight_same_number}\r\n                self.editButton(buttonData)\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\nfunction unhighlightAll()\r\n    for buttonIndex, _ in pairs(modifiedSquares) do\r\n        local i = math.floor(buttonIndex / 9) + 1\r\n        local j = (buttonIndex % 9) + 1\r\n        local fontColor = colors.nonstarting_font_color\r\n        if sudoku.value[i][j] ~= 0 then fontColor = colors.starting_font_color end\r\n        local buttonData = {index = buttonIndex, color = colors.default, font_color = fontColor}\r\n        self.editButton(buttonData)\r\n    end\r\n    modifiedSquares = {}\r\nend\r\n\r\nfunction highlightBoxRowAndColumn(i, j, value)\r\n    local boxesToHighlight = {} -- Used to not repeat edit the same square\r\n\r\n    local startingBoxIndex = {i = math.floor((j - 1) / 3) * 3 + 1, j = math.floor((i - 1) / 3) * 3 + 1}\r\n    -- Highlight the column\r\n    local baseIndexJ = j - 1\r\n    for k = 1, 9 do\r\n        local buttonIndex = 9 * (k - 1) + baseIndexJ\r\n        boxesToHighlight[buttonIndex] = true\r\n        modifiedSquares[buttonIndex] = true\r\n    end\r\n    -- Highlight the row\r\n    local baseIndex = 9 * (i -1) -- Slightly optimized to not repeat the same math\r\n    for k = 1, 9 do\r\n        local buttonIndex = baseIndex + k - 1\r\n        boxesToHighlight[buttonIndex] = true\r\n        modifiedSquares[buttonIndex] = true\r\n    end\r\n    -- Highlight the box\r\n    baseIndexJ = 9 * (startingBoxIndex.j - 1) -- Slightly optimized to not repeat the same math\r\n    for k = 0, 2 do\r\n        baseIndexK = baseIndexJ + 9 * k\r\n        for l = 0, 2 do\r\n            local buttonIndex = baseIndexK + startingBoxIndex.i + l - 1\r\n            boxesToHighlight[buttonIndex] = true\r\n            modifiedSquares[buttonIndex] = true\r\n        end\r\n    end\r\n    local highlightColor = colors.highlight_square\r\n    for buttonIndex, _ in pairs(boxesToHighlight) do\r\n        local buttonData = {index = buttonIndex, color = highlightColor}\r\n        self.editButton(buttonData)\r\n    end\r\n\r\n    -- Highlight the selected square\r\n    local buttonIndex = 9 * (i -1) + j - 1\r\n    modifiedSquares[buttonIndex] = true\r\n    local buttonData = {index = buttonIndex, color = colors.highlight_selected_square}\r\n    self.editButton(buttonData)\r\nend",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "78ebd5",
      "Name": "Custom_Tile",
      "Transform": {
        "posX": -14.8663092,
        "posY": 4.78341627,
        "posZ": -13.2784252,
        "rotX": 355.9628,
        "rotY": 0.490124941,
        "rotZ": 352.878876,
        "scaleX": 2.99,
        "scaleY": 1,
        "scaleZ": 2.98527646
      },
      "Nickname": "Jeopardy Trivia",
      "Description": "",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0,
        "y": 0,
        "z": 0
      },
      "ColorDiffuse": {
        "r": 1,
        "g": 1,
        "b": 1
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomImage": {
        "ImageURL": "https://steamusercontent-a.akamaihd.net/ugc/1600421982330300896/17B7302CBDE9976F61AA2E5BEA01087A3100576B/",
        "ImageSecondaryURL": "",
        "ImageScalar": 1,
        "WidthScale": 0,
        "CustomTile": {
          "Type": 3,
          "Thickness": 0.110000156,
          "Stackable": false,
          "Stretch": true
        }
      },
      "LuaScript": "local jsonData = nil\r\nlocal allQuestions\r\nlocal beginningWord = nil\r\nlocal history = \"\"\r\nlocal historyArray = {}\r\nlocal answered = 1;\r\nfunction onLoad()\r\n  local data = {click_function = \"resetGame\", function_owner = self, label = \"RESET  GAME\", rotation = {180, 0, 0}, scale = {0.5, 0.5, 0.5}, width = 2400, height = 400, font_size = 400}\r\n  self.createButton(data)\r\n  WebRequest.get(\"https://ugleh.com/ladder/index.php\", function(a) webRequestCallback(a) end)\r\nend\r\n\r\n\r\nfunction resetGame()\r\n  --Print last response\r\n  printToAll(\"[FF00FF][IJWL][-] Game Reset. The last answer was... [FF0000]\" .. string.upper(allQuestions[1].response) .. \"[-]\", {1, 1, 1})\r\n  historyArray = {}\r\n  history = \"\"\r\n  answered = 1\r\n  self.UI.setAttribute('answer', \"text\", \"\");\r\n  self.UI.setAttribute('answer', \"placeholder\", \"4-Letter Answer\")\r\n  WebRequest.get(\"https://ugleh.com/ladder/index.php\", function(a) webRequestCallback(a) end)\r\n  self.flip()\r\nend\r\n\r\nfunction webRequestCallback(webReturn)\r\n    jsonData = JSON.decode(webReturn.text)\r\n    beginningWord = jsonData.beginningWord\r\n    allQuestions = jsonData.wordLadder\r\n    table.insert(historyArray, beginningWord)\r\n    createHistoryString()\r\n    loadNewOne()\r\n  end\r\n\r\n  function webRequestCallbackNext(webReturn)\r\n    jsonData = JSON.decode(webReturn.text)\r\n    local incomingQuestions = jsonData.wordLadder\r\n    -- Add the new questions to the end of the allQuestions table\r\n    for i, v in ipairs(incomingQuestions) do\r\n      table.insert(allQuestions, v)\r\n    end\r\n  end\r\n\r\nfunction loadNewOne()\r\n  --print(allQuestions[1].response);\r\n  self.UI.setAttribute(\"historyLabel\", \"text\", \"Score (\" .. answered .. \")\")\r\n  self.UI.setValue(\"history\",history);\r\n\r\n  self.UI.setAttribute(\"query\", \"text\", string.upper(allQuestions[1].query))\r\n  self.UI.setAttribute(\"category\", \"text\", string.upper(allQuestions[1].category))\r\n  self.UI.setAttribute(\"category\", \"textColor\", \"White\")\r\nend\r\n\r\nfunction submitAnswer()\r\n    self.UI.setAttribute(\"query\", \"text\", allQuestions[1].response)\r\n    self.UI.setAttribute(\"category\", \"text\", \"CLICK FOR A NEW QUESTION\")\r\n    self.UI.setAttribute(\"category\", \"textColor\", \"White\")\r\n    table.remove(allQuestions, 1)\r\nend\r\n\r\nfunction valueChanged(luaPlayer, value, id)\r\n  value = string.upper(value)\r\n  if value == string.upper(allQuestions[1].response) then\r\n    self.UI.setAttribute('answer', \"text\", \"\")\r\n    self.UI.setAttribute('answer', \"placeholder\", value)\r\n    table.insert(historyArray, value)\r\n    createHistoryString()\r\n    answered = answered + 1\r\n    --Remove the first question and load the next one\r\n    table.remove(allQuestions, 1)\r\n    loadNewOne()\r\n    -- if allQuestions has 2 left, load more\r\n    if #allQuestions <= 2 then\r\n      WebRequest.get(\"https://ugleh.com/ladder/index.php?input=\" .. allQuestions[#allQuestions].response, function(a) webRequestCallbackNext(a) end)\r\n    end\r\n  else\r\n    value = string.gsub(value, \"%d\", \"\") --Removes any numbers before updating the text for everyone else\r\n    self.UI.setAttribute('answer', \"text\", value)\r\n  end\r\nend\r\n\r\n\r\nfunction createHistoryString()\r\n  local historyString = \"\"\r\n  --if historyArray is greater than 10, remove the first element\r\n  if #historyArray > 10 then\r\n    table.remove(historyArray, 1)\r\n  end\r\n  -- 10 white colors from FFFFFFFF to FFFFFF00\r\n  colorGradientArray = {\r\n    \"#FFFFFF00\",\r\n    \"#FFFFFF1A\",\r\n    \"#FFFFFF33\",\r\n    \"#FFFFFF4D\",\r\n    \"#FFFFFF66\",\r\n    \"#FFFFFF80\",\r\n    \"#FFFFFF99\",\r\n    \"#FFFFFFB3\",\r\n    \"#FFFFFFCC\",\r\n    \"#FFFFFFE6\",\r\n    \"#FFFFFFFF\"\r\n  }\r\n  for i, v in ipairs(historyArray) do\r\n    local colorIndex = i;\r\n    if(#historyArray < 10) then\r\n      colorIndex = i + (10 - #historyArray)\r\n    end\r\n    local color = colorGradientArray[colorIndex]\r\n    historyString = historyString .. [[\r\n\r\n]] .. \"<textcolor color=\\\"\" .. color .. \"\\\">\" .. string.upper(v) .. \"</textcolor>\"\r\n  end\r\n\r\n  --if historyArray is less than 20, add remaining [[]]\r\n  for i = 1, 10 - #historyArray do\r\n    historyString = historyString .. [[\r\n\r\n]] .. \"\"\r\n  end\r\n  history = historyString\r\nend",
      "LuaScriptState": "",
      "XmlUI": "<Panel width=\"353\" height=\"100\" position=\"0 150 -13\" color=\"#060CE9\">\r\n  <Text id=\"category\" text=\"\" fontStyle=\"Bold\" color=\"White\" resizeTextForBestFit=\"true\" ></Text>\r\n</Panel>\r\n<Panel width=\"353\" height=\"194\" position=\"0 0 -13\">\r\n  <Text id=\"query\" text=\"\" fontStyle=\"Bold\" color=\"White\" resizeTextForBestFit=\"true\"></Text>\r\n</Panel>\r\n<Panel width=\"353\" height=\"194\" position=\"0 -135 -13\">\r\n  <InputField id=\"answer\" width = \"353\" height = \"60\" characterValidation=\"Alphanumeric\" characterLimit=\"4\" fontSize=\"40\" placeholder=\"4-Letter Answer\" alignment=\"MiddleCenter\" onValueChanged=\"valueChanged()\"></InputField>\r\n</Panel>\r\n\r\n<Panel width=\"100\" height=\"25\" position=\"230 190 -13\" color=\"#067ee9\" >\r\n  <Text id=\"historyLabel\"  text=\"Score (1)\" color=\"#e9e306\" resizeTextForBestFit=\"true\" fontSize=\"12\" alignment=\"UpperCenter\"></Text>\r\n  <Text id=\"history\"  text=\"\" color=\"White\" resizeTextForBestFit=\"true\" fontSize=\"12\" alignment=\"UpperCenter\"></Text>\r\n</Panel>\r\n\r\n<Panel width=\"100\" height=\"340\" position=\"230 8 -13\" color=\"#067ee9\" >\r\n  <Text id=\"history\"  text=\"\" color=\"White\" resizeTextForBestFit=\"true\" fontSize=\"12\" alignment=\"UpperCenter\"></Text>\r\n</Panel>"
    },
    {
      "GUID": "4dc666",
      "Name": "Custom_Tile",
      "Transform": {
        "posX": -13.6836061,
        "posY": 4.965725,
        "posZ": -14.3215036,
        "rotX": 358.29718,
        "rotY": 0.308749557,
        "rotZ": 350.15744,
        "scaleX": 2.99,
        "scaleY": 1,
        "scaleZ": 2.98527646
      },
      "Nickname": "Word Ladder",
      "Description": "Author: Ugleh\nVersion: 0.0.2\nWorkshop ID: 3233885108\n\nDescription: This game of Word Ladder uses Jeopardy data to create an infinite game of Word Ladder. More competitive play will come soon.",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0,
        "y": 0,
        "z": 0
      },
      "ColorDiffuse": {
        "r": 1,
        "g": 1,
        "b": 1
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomImage": {
        "ImageURL": "https://steamusercontent-a.akamaihd.net/ugc/1600421982330300896/17B7302CBDE9976F61AA2E5BEA01087A3100576B/",
        "ImageSecondaryURL": "",
        "ImageScalar": 1,
        "WidthScale": 0,
        "CustomTile": {
          "Type": 3,
          "Thickness": 0.110000156,
          "Stackable": false,
          "Stretch": true
        }
      },
      "LuaScript": "local jsonData = nil\r\nlocal allQuestions\r\nlocal beginningWord = nil\r\nlocal history = \"\"\r\nlocal historyArray = {}\r\nlocal answered = 1;\r\nfunction onLoad()\r\n  local data = {click_function = \"resetGame\", function_owner = self, label = \"RESET  GAME\", rotation = {180, 0, 0}, scale = {0.5, 0.5, 0.5}, width = 2400, height = 400, font_size = 400}\r\n  self.createButton(data)\r\n  WebRequest.get(\"https://ugleh.com/ladder/index.php\", function(a) webRequestCallback(a) end)\r\nend\r\n\r\n\r\nfunction resetGame()\r\n  --Print last response\r\n  printToAll(\"[FF00FF][IJWL][-] Game Reset. The last answer was... [FF0000]\" .. string.upper(allQuestions[1].response) .. \"[-]\", {1, 1, 1})\r\n  historyArray = {}\r\n  history = \"\"\r\n  answered = 1\r\n  self.UI.setAttribute('answer', \"text\", \"\");\r\n  self.UI.setAttribute('answer', \"placeholder\", \"4-Letter Answer\")\r\n  WebRequest.get(\"https://ugleh.com/ladder/index.php\", function(a) webRequestCallback(a) end)\r\n  self.flip()\r\nend\r\n\r\nfunction webRequestCallback(webReturn)\r\n    jsonData = JSON.decode(webReturn.text)\r\n    beginningWord = jsonData.beginningWord\r\n    allQuestions = jsonData.wordLadder\r\n    table.insert(historyArray, beginningWord)\r\n    createHistoryString()\r\n    loadNewOne()\r\n  end\r\n\r\n  function webRequestCallbackNext(webReturn)\r\n    jsonData = JSON.decode(webReturn.text)\r\n    local incomingQuestions = jsonData.wordLadder\r\n    -- Add the new questions to the end of the allQuestions table\r\n    for i, v in ipairs(incomingQuestions) do\r\n      table.insert(allQuestions, v)\r\n    end\r\n  end\r\n\r\nfunction loadNewOne()\r\n  --print(allQuestions[1].response);\r\n  self.UI.setAttribute(\"historyLabel\", \"text\", \"Score (\" .. answered .. \")\")\r\n  self.UI.setValue(\"history\",history);\r\n\r\n  self.UI.setAttribute(\"query\", \"text\", string.upper(allQuestions[1].query))\r\n  self.UI.setAttribute(\"category\", \"text\", string.upper(allQuestions[1].category))\r\n  self.UI.setAttribute(\"category\", \"textColor\", \"White\")\r\nend\r\n\r\nfunction submitAnswer()\r\n    self.UI.setAttribute(\"query\", \"text\", allQuestions[1].response)\r\n    self.UI.setAttribute(\"category\", \"text\", \"CLICK FOR A NEW QUESTION\")\r\n    self.UI.setAttribute(\"category\", \"textColor\", \"White\")\r\n    table.remove(allQuestions, 1)\r\nend\r\n\r\nfunction valueChanged(luaPlayer, value, id)\r\n  value = string.upper(value)\r\n  if value == string.upper(allQuestions[1].response) then\r\n    self.UI.setAttribute('answer', \"text\", \"\")\r\n    self.UI.setAttribute('answer', \"placeholder\", value)\r\n    table.insert(historyArray, value)\r\n    createHistoryString()\r\n    answered = answered + 1\r\n    --Remove the first question and load the next one\r\n    table.remove(allQuestions, 1)\r\n    loadNewOne()\r\n    -- if allQuestions has 2 left, load more\r\n    if #allQuestions <= 2 then\r\n      WebRequest.get(\"https://ugleh.com/ladder/index.php?input=\" .. allQuestions[#allQuestions].response, function(a) webRequestCallbackNext(a) end)\r\n    end\r\n  else\r\n    value = string.gsub(value, \"%d\", \"\") --Removes any numbers before updating the text for everyone else\r\n    self.UI.setAttribute('answer', \"text\", value)\r\n  end\r\nend\r\n\r\n\r\nfunction createHistoryString()\r\n  local historyString = \"\"\r\n  --if historyArray is greater than 10, remove the first element\r\n  if #historyArray > 10 then\r\n    table.remove(historyArray, 1)\r\n  end\r\n  -- 10 white colors from FFFFFFFF to FFFFFF00\r\n  colorGradientArray = {\r\n    \"#FFFFFF00\",\r\n    \"#FFFFFF1A\",\r\n    \"#FFFFFF33\",\r\n    \"#FFFFFF4D\",\r\n    \"#FFFFFF66\",\r\n    \"#FFFFFF80\",\r\n    \"#FFFFFF99\",\r\n    \"#FFFFFFB3\",\r\n    \"#FFFFFFCC\",\r\n    \"#FFFFFFE6\",\r\n    \"#FFFFFFFF\"\r\n  }\r\n  for i, v in ipairs(historyArray) do\r\n    local colorIndex = i;\r\n    if(#historyArray < 10) then\r\n      colorIndex = i + (10 - #historyArray)\r\n    end\r\n    local color = colorGradientArray[colorIndex]\r\n    historyString = historyString .. [[\r\n\r\n]] .. \"<textcolor color=\\\"\" .. color .. \"\\\">\" .. string.upper(v) .. \"</textcolor>\"\r\n  end\r\n\r\n  --if historyArray is less than 20, add remaining [[]]\r\n  for i = 1, 10 - #historyArray do\r\n    historyString = historyString .. [[\r\n\r\n]] .. \"\"\r\n  end\r\n  history = historyString\r\nend",
      "LuaScriptState": "",
      "XmlUI": "<Panel width=\"353\" height=\"100\" position=\"0 150 -13\" color=\"#060CE9\">\r\n  <Text id=\"category\" text=\"\" fontStyle=\"Bold\" color=\"White\" resizeTextForBestFit=\"true\" ></Text>\r\n</Panel>\r\n<Panel width=\"353\" height=\"194\" position=\"0 0 -13\">\r\n  <Text id=\"query\" text=\"\" fontStyle=\"Bold\" color=\"White\" resizeTextForBestFit=\"true\"></Text>\r\n</Panel>\r\n<Panel width=\"353\" height=\"194\" position=\"0 -135 -13\">\r\n  <InputField id=\"answer\" width = \"353\" height = \"60\" characterValidation=\"Alphanumeric\" characterLimit=\"4\" fontSize=\"40\" placeholder=\"4-Letter Answer\" alignment=\"MiddleCenter\" onValueChanged=\"valueChanged()\"></InputField>\r\n</Panel>\r\n\r\n<Panel width=\"100\" height=\"25\" position=\"230 190 -13\" color=\"#067ee9\" >\r\n  <Text id=\"historyLabel\"  text=\"Score (1)\" color=\"#e9e306\" resizeTextForBestFit=\"true\" fontSize=\"12\" alignment=\"UpperCenter\"></Text>\r\n  <Text id=\"history\"  text=\"\" color=\"White\" resizeTextForBestFit=\"true\" fontSize=\"12\" alignment=\"UpperCenter\"></Text>\r\n</Panel>\r\n\r\n<Panel width=\"100\" height=\"340\" position=\"230 8 -13\" color=\"#067ee9\" >\r\n  <Text id=\"history\"  text=\"\" color=\"White\" resizeTextForBestFit=\"true\" fontSize=\"12\" alignment=\"UpperCenter\"></Text>\r\n</Panel>"
    },
    {
      "GUID": "c750f3",
      "Name": "Custom_Token",
      "Transform": {
        "posX": -16.1636086,
        "posY": 2.964474,
        "posZ": -17.0780888,
        "rotX": 353.0116,
        "rotY": 0.804293633,
        "rotZ": 353.3848,
        "scaleX": 1,
        "scaleY": 1,
        "scaleZ": 1
      },
      "Nickname": "Countdown Maths",
      "Description": "",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0,
        "y": 0,
        "z": 0
      },
      "ColorDiffuse": {
        "r": 0.674216032,
        "g": 0.674216032,
        "b": 0.674216032
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomImage": {
        "ImageURL": "https://steamusercontent-a.akamaihd.net/ugc/778484214115571167/65C15824F166C005B1402B172219BF50751CB571/",
        "ImageSecondaryURL": "",
        "ImageScalar": 1,
        "WidthScale": 0,
        "CustomToken": {
          "Thickness": 0.1,
          "MergeDistancePixels": 15,
          "StandUp": false,
          "Stackable": false
        }
      },
      "LuaScript": "countdownTimer = 30\r\nlargeNumbers = {25, 50, 75, 100}\r\nsmallNumbers = {1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10}\r\nselectedNumbers = {}\r\ntarget = 0\r\n\r\nfunction onLoad(save_state)\r\n\r\nend\r\n\r\nfunction selectedLarge(player, largeNumbersCount)\r\n  selectedNumbers = selectNumbers(tonumber(largeNumbersCount))\r\n  target = math.random(100,999)\r\n  modifyGameUI(true)\r\nend\r\n\r\nfunction modifyNumbersUI()\r\n  for i=1,6,1 do\r\n    self.UI.setAttribute(\"number\" .. tostring(i), \"text\", selectedNumbers[i])\r\n  end\r\n  if(target ~= 0) then\r\n    self.UI.setAttribute(\"target\", \"text\", \"Target: \" .. tostring(target))\r\n  else\r\n    self.UI.setAttribute(\"target\", \"text\", \"\")\r\n  end\r\nend\r\n\r\nfunction solve(player)\r\n  self.UI.setAttribute(\"solve\", \"interactable\", \"false\")\r\nend\r\n\r\n\r\nfunction reset(player)\r\n  selectedNumbers = {}\r\n  target = 0\r\n  modifyGameUI(false)\r\nend\r\n\r\nfunction modifyGameUI(isGameActive)\r\n  for i=0,4,1 do\r\n    self.UI.setAttribute(\"large\" .. tostring(i), \"interactable\", not isGameActive)\r\n  end\r\n  self.UI.setAttribute(\"solve\", \"interactable\", isGameActive)\r\n  self.UI.setAttribute(\"reset\", \"interactable\", isGameActive)\r\n  modifyNumbersUI()\r\nend\r\n\r\nfunction selectNumbers(largeNumbersCount)\r\n  local smallNumbersCount = 6 - largeNumbersCount\r\n  if(largeNumbersCount > 0) then largeNumbers = shuffle(largeNumbers) end\r\n  if(smallNumbersCount > 0) then smallNumbers = shuffle(smallNumbers) end\r\n  local tempArray = {}\r\n  for i=1,largeNumbersCount,1 do\r\n    table.insert(tempArray, largeNumbers[i])\r\n  end\r\n  for i=1,smallNumbersCount,1 do\r\n    table.insert(tempArray, smallNumbers[i])\r\n  end\r\n  return tempArray\r\nend\r\n\r\nfunction shuffle(tbl)\r\n  for i = #tbl, 2, -1 do\r\n    local j = math.random(i)\r\n    tbl[i], tbl[j] = tbl[j], tbl[i]\r\n  end\r\n  return tbl\r\nend\r\n",
      "LuaScriptState": "",
      "XmlUI": "<Canvas width=\"500\" height=\"60\" position=\"0 90 -10\" color=\"rgba(0,0,0,0.62)\"><Text id=\"target\" resizeTextForBestFit=\"true\" color=\"#ffff11\" outlinefontStyle=\"Bold\" text=\"\"/></Canvas>\r\n\r\n<Canvas width=\"80\" height=\"80\" position=\"-225 5 -10\" color=\"rgba(0,0,0,0.62)\"><Text id=\"number1\" color=\"#ffffff\" resizeTextForBestFit=\"true\" fontStyle=\"Bold\"/></Canvas>\r\n<Canvas width=\"80\" height=\"80\" position=\"-135 5 -10\" color=\"rgba(0,0,0,0.62)\"><Text id=\"number2\" color=\"#ffffff\" resizeTextForBestFit=\"true\" fontStyle=\"Bold\"/></Canvas>\r\n<Canvas width=\"80\" height=\"80\" position=\"-45 5 -10\" color=\"rgba(0,0,0,0.62)\"><Text id=\"number3\" color=\"#ffffff\" resizeTextForBestFit=\"true\" fontStyle=\"Bold\"/></Canvas>\r\n<Canvas width=\"80\" height=\"80\" position=\"45 5 -10\" color=\"rgba(0,0,0,0.62)\"><Text id=\"number4\" color=\"#ffffff\" resizeTextForBestFit=\"true\" fontStyle=\"Bold\"/></Canvas>\r\n<Canvas width=\"80\" height=\"80\" position=\"135 5 -10\" color=\"rgba(0,0,0,0.62)\"><Text id=\"number5\" color=\"#ffffff\" resizeTextForBestFit=\"true\" fontStyle=\"Bold\"/></Canvas>\r\n<Canvas width=\"80\" height=\"80\" position=\"225 5 -10\" color=\"rgba(0,0,0,0.62)\"><Text id=\"number6\" color=\"#ffffff\" resizeTextForBestFit=\"true\" fontStyle=\"Bold\"/></Canvas>\r\n\r\n\r\n<Button id=\"large0\" position=\"-190 -65 -10\" scale= \"0.6 0.6 0.6\" fontStyle=\"bold\" width=\"140\" height=\"60\" fontSize=\"30\" interactable=\"true\" onClick=\"selectedLarge(0)\" text=\"0 Large\"/>\r\n<Button id=\"large1\" position=\"-95 -65 -10\" scale= \"0.6 0.6 0.6\" fontStyle=\"bold\" width=\"140\" height=\"60\" fontSize=\"30\" interactable=\"true\" onClick=\"selectedLarge(1)\" text=\"1 Large\"/>\r\n<Button id=\"large2\" position=\"0 -65 -10\" scale= \"0.6 0.6 0.6\" fontStyle=\"bold\" width=\"140\" height=\"60\" fontSize=\"30\" interactable=\"true\" onClick=\"selectedLarge(2)\" text=\"2 Large\"/>\r\n<Button id=\"large3\" position=\"95 -65 -10\" scale= \"0.6 0.6 0.6\" fontStyle=\"bold\" width=\"140\" height=\"60\" fontSize=\"30\" interactable=\"true\" onClick=\"selectedLarge(3)\" text=\"3 Large\"/>\r\n<Button id=\"large4\" position=\"190 -65 -10\" scale= \"0.6 0.6 0.6\" fontStyle=\"bold\" width=\"140\" height=\"60\" fontSize=\"30\" interactable=\"true\" onClick=\"selectedLarge(4)\" text=\"4 Large\"/>\r\n\r\n<Button id=\"solvea\" position=\"-190 -110 -10\" scale= \"0.6 0.6 0.6\" fontStyle=\"bold\" width=\"140\" height=\"60\" fontSize=\"30\" interactable=\"false\" onClick=\"solve()\" text=\"Solve\"/>\r\n<Button id=\"reset\" position=\"-95 -110 -10\" scale= \"0.6 0.6 0.6\" fontStyle=\"bold\" width=\"140\" height=\"60\" fontSize=\"30\" interactable=\"false\" onClick=\"reset()\" text=\"Reset\"/>"
    },
    {
      "GUID": "149703",
      "Name": "Custom_Board",
      "Transform": {
        "posX": -12.824235,
        "posY": 4.52119255,
        "posZ": -11.3715591,
        "rotX": 7.164542,
        "rotY": 180.0296,
        "rotZ": 0.009997365,
        "scaleX": 0.725000262,
        "scaleY": 0.725000262,
        "scaleZ": 0.725000262
      },
      "Nickname": "Wordle",
      "Description": "Fully scripted Wordle board.\nV 1.8\n\nWorkshop page at https://steamcommunity.com/sharedfiles/filedetails/?id=2777782837\n\nCreated by David",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0,
        "y": 0,
        "z": 0
      },
      "ColorDiffuse": {
        "r": 1,
        "g": 1,
        "b": 1
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomImage": {
        "ImageURL": "https://steamusercontent-a.akamaihd.net/ugc/1861681192330390326/B39FA717B0CAA7129F206E2968F330B77FBAC1F3/",
        "ImageSecondaryURL": "",
        "ImageScalar": 1,
        "WidthScale": 0.757142842
      },
      "LuaScript": "xs = 1.42\nys = 1.47\nxd = -6.45\nyd = 4.3\nkeyboard = {\n    {'q',0,0},\n    {'w',0,1},\n    {'e',0,2},\n    {'r',0,3},\n    {'t',0,4},\n    {'y',0,5},\n    {'u',0,6},\n    {'i',0,7},\n    {'o',0,8},\n    {'p',0,9},\n    {'a',1,0.5},\n    {'s',1,1.5},\n    {'d',1,2.5},\n    {'f',1,3.5},\n    {'g',1,4.5},\n    {'h',1,5.5},\n    {'j',1,6.5},\n    {'k',1,7.5},\n    {'l',1,8.5},\n    {'z',2,1.5},\n    {'x',2,2.5},\n    {'c',2,3.5},\n    {'v',2,4.5},\n    {'b',2,5.5},\n    {'n',2,6.5},\n    {'m',2,7.5}\n}\nenterKey = {2,0.07}\nbackspaceKey = {2,8.9}\nresetButton = {3,6}\nwhite = {1,1,1}\nyellow = {1,0.77,0}\ngreen = {0,1,0}\nred = {0.5,0,1}\n\nanswer = nil\ncurrentWord = {}\ncurrentWordLen = 0\nguesses = {}\nguessCount = 0\nseed = \"\"\nstartWord = \"\"\nfin = false\n\nwordBank = nil\nwordKeys = {}\n\nfunction onLoad()\n    WebRequest.get(\"https://davidy22.github.io/api/words.json\", function(a) webRequestCallback(a) end)\n    renderKeyboard()\nend\n\nfunction renderCleanup()\n    local buttons = self.getButtons()\n    for k = #buttons, 1, -1 do\n        if #buttons <= 28 + guessCount * 5 then\n            break\n        end\n        self.removeButton(buttons[k].index)\n        table.remove(buttons)\n    end\nend\n\nfunction renderKeyboard()\n    for i, key in ipairs(keyboard) do\n        self.createButton({\n            click_function = \"keypress\" .. key[1],\n            function_owner = self,\n            font_size = 400,\n            width = 500,\n            height = 600,\n            color = {0,0,0,1},\n            font_color = {1,1,1},\n            position = {xs*key[3]+xd,1,ys*key[2]+yd},\n            label = string.upper(key[1]),\n            scale = {1.32,1,1}\n        })\n    end\n    self.createButton({\n        click_function = \"enter\",\n        function_owner = self,\n        font_size = 300,\n        width = 920,\n        height = 600,\n        color = {0,0,0,1},\n        font_color = {1,1,1},\n        position = {xs*enterKey[2]+xd,1,ys*enterKey[1]+yd},\n        label = \"Enter\",\n        scale = {1.32,1,1}\n    })\n    self.createButton({\n        click_function = \"backspace\",\n        function_owner = self,\n        font_size = 300,\n        width = 890,\n        height = 600,\n        color = {0,0,0,1},\n        font_color = {1,1,1},\n        position = {xs*backspaceKey[2]+xd,1,ys*backspaceKey[1]+yd},\n        label = \"Back\",\n        scale = {1.32,1,1}\n    })\nend\n\n\nfunction renderWord(word)\n    local letterCounts = {}\n    for i = 1, 5 do\n        if string.sub(word, i, i) == string.sub(answer, i, i) then\n            self.createButton({\n                click_function = \"blank\",\n                function_owner = self,\n                font_size = 550,\n                width = 800,\n                height = 800,\n                color = green,\n                font_color = {0,0,0},\n                position = {xs*i*1.8-1+xd,1,ys*guessCount*1.2 - 11+yd},\n                label = string.upper(string.sub(word, i, i)),\n                scale = {1.32,1,1}\n            })\n        else\n            if letterCounts[string.sub(answer, i, i)] == nil then\n                letterCounts[string.sub(answer, i, i)] = 1\n            else\n                letterCounts[string.sub(answer, i, i)] = letterCounts[string.sub(answer, i, i)] + 1\n            end\n        end\n    end\n    for i = 1, 5 do\n        if string.sub(word, i, i) ~= string.sub(answer, i, i) then\n            if letterCounts[string.sub(word, i, i)] == nil then\n                self.createButton({\n                    click_function = \"blank\",\n                    function_owner = self,\n                    font_size = 550,\n                    width = 800,\n                    height = 800,\n                    color = {0,0,0,1},\n                    font_color = {1,1,1},\n                    position = {xs*i*1.8-1+xd,1,ys*guessCount*1.2 - 11+yd},\n                    label = string.upper(string.sub(word, i, i)),\n                    scale = {1.32,1,1}\n                })\n                if string.find(answer, string.sub(word, i, i)) == nil then\n                    for j = 0, 25 do\n                        if keyboard[j+1][1] == string.sub(word, i, i) then\n                            self.editButton({index=j, color = {0.5,0.5,0.5,1}})\n                            break\n                        end\n                    end\n                end\n            else\n                letterCounts[string.sub(word, i, i)] = letterCounts[string.sub(word, i, i)] - 1\n                if letterCounts[string.sub(word, i, i)] == 0 then letterCounts[string.sub(word, i, i)] = nil end\n                self.createButton({\n                    click_function = \"blank\",\n                    function_owner = self,\n                    font_size = 550,\n                    width = 800,\n                    height = 800,\n                    color = yellow,\n                    font_color = {0,0,0},\n                    position = {xs*i*1.8-1+xd,1,ys*guessCount*1.2 - 11+yd},\n                    label = string.upper(string.sub(word, i, i)),\n                    scale = {1.32,1,1}\n                })\n            end\n        end\n    end\nend\n\n\nfunction renderCurrent()\n    for i = 1, #currentWord do\n        self.createButton({\n            click_function = \"blank\",\n            function_owner = self,\n            font_size = 550,\n            width = 800,\n            height = 800,\n            color = {0,0,0,1},\n            font_color = {1,1,1},\n            position = {xs*i*1.8-1+xd,1,ys*guessCount*1.2 - 11+yd},\n            label = string.upper(currentWord[i]),\n            scale = {1.32,1,1}\n        })\n    end\nend\n\n\nfunction webRequestCallback(webReturn)\n    wordBank = JSON.decode(webReturn.text)[1]\n    for k, v in pairs(wordBank) do\n        table.insert(wordKeys, k)\n    end\n    reset()\nend\n\nfunction checkWord(word)\n    if word == answer then\n        self.setColorTint(green)\n        renderCleanup()\n        renderWord(word)\n        createReset()\n    elseif wordBank[word] == nil then\n        self.setColorTint(red)\n        Wait.frames(function() self.setColorTint(white) end, 80)\n    else\n        table.insert(guesses, word)\n        renderCleanup()\n        renderWord(word)\n        guessCount = guessCount + 1\n        currentWord = {}\n        currentWordLen = 0\n        if guessCount == 6 then\n            self.setColorTint(red)\n            createReset()\n            self.createButton({\n                click_function = \"blank\",\n                function_owner = self,\n                font_size = 300,\n                width = 2300,\n                height = 600,\n                color = {0.1,0.15,0.3,1},\n                font_color = {1,1,0.9},\n                position = {xs*resetButton[2]+xd-6,1,ys*resetButton[1]+yd},\n                label = \"Word was \" .. answer,\n                scale = {1.32,1,1}\n            })\n        else\n            self.setColorTint(yellow)\n            Wait.frames(function() self.setColorTint(white) end, 80)\n        end\n    end\nend\n\nfunction createReset()\n    fin = true\n    self.createButton({\n        click_function = \"reset\",\n        function_owner = self,\n        font_size = 300,\n        width = 910,\n        height = 600,\n        color = {0.1,0.15,0.3,1},\n        font_color = {1,1,0.9},\n        position = {xs*resetButton[2]+xd,1,ys*resetButton[1]+yd},\n        label = \"Reset\",\n        scale = {1.32,1,1}\n    })\nend\n\nfunction reset()\n    self.setColorTint(white)\n    guesses = {}\n    currentWord = {}\n    currentWordLen = 0\n    guessCount = 0\n    self.clearButtons()\n    renderKeyboard()\n    answer = wordKeys[math.random(1, #wordKeys)]\n    fin = false\nend\n\n\nfunction blank() end\n\n\nfunction enter()\n    if LOCK then return end\n    LOCK = true\n    Wait.time(function() LOCK = false end, 0.1)\n\n    checkWord(table.concat(currentWord))\nend\n\n\nfunction backspace()\n    if LOCK or fin then return end\n    LOCK = true\n    Wait.time(function() LOCK = false end, 0.1)\n\n    if currentWordLen > 0 then\n        currentWordLen = currentWordLen - 1\n        table.remove(currentWord)\n        local buttons = self.getButtons()\n        self.removeButton(buttons[#buttons].index)\n    end\nend\n\nfunction keypress(letter)\n    if LOCK or fin then return end\n    LOCK = true\n    Wait.time(function() LOCK = false end, 0.1)\n\n    if currentWordLen < 5 and guessCount < 6 then\n        table.insert(currentWord, letter)\n        currentWordLen = currentWordLen + 1\n        \n        self.createButton({\n            click_function = \"blank\",\n            function_owner = self,\n            font_size = 550,\n            width = 800,\n            height = 800,\n            color = {0,0,0,1},\n            font_color = {1,1,1},\n            position = {xs*#currentWord*1.8-1+xd,1,ys*guessCount*1.2 - 11+yd},\n            label = string.upper(letter),\n            scale = {1.32,1,1}\n        })\n    end\nend\n\nfunction updateButtonText(ply, text)\n    seed = text\n    if seed == \"\" then\n        self.UI.setAttribute(\"submit\", \"text\", \"Reset\")\n    else\n        self.UI.setAttribute(\"submit\", \"text\", \"Set Seed\")\n    end\nend\n\nfunction setSeed()\n    if seed ~= \"\" then\n        math.randomseed(tonumber(seed))\n    else\n        math.randomseed(os.time())\n    end\n    reset()\n    self.setColorTint(green)\n    Wait.frames(function() self.setColorTint(white) end, 60)\nend\n\nfunction updateSetWordText(ply, text)\n    startWord = text\nend\n\nfunction setWord()\n    startWord = startWord:lower()\n    if wordBank[startWord] == nil then\n        self.setColorTint(red)\n        Wait.frames(function() self.setColorTint(white) end, 80)\n    else\n        reset()\n        answer = startWord\n        self.setColorTint(green)\n        Wait.frames(function() self.setColorTint(white) end, 60)\n    end\nend\n\nfunction keypressq() keypress(\"q\") end\nfunction keypressw() keypress(\"w\") end\nfunction keypresse() keypress(\"e\") end\nfunction keypressr() keypress(\"r\") end\nfunction keypresst() keypress(\"t\") end\nfunction keypressy() keypress(\"y\") end\nfunction keypressu() keypress(\"u\") end\nfunction keypressi() keypress(\"i\") end\nfunction keypresso() keypress(\"o\") end\nfunction keypressp() keypress(\"p\") end\nfunction keypressa() keypress(\"a\") end\nfunction keypresss() keypress(\"s\") end\nfunction keypressd() keypress(\"d\") end\nfunction keypressf() keypress(\"f\") end\nfunction keypressg() keypress(\"g\") end\nfunction keypressh() keypress(\"h\") end\nfunction keypressj() keypress(\"j\") end\nfunction keypressk() keypress(\"k\") end\nfunction keypressl() keypress(\"l\") end\nfunction keypressz() keypress(\"z\") end\nfunction keypressx() keypress(\"x\") end\nfunction keypressc() keypress(\"c\") end\nfunction keypressv() keypress(\"v\") end\nfunction keypressb() keypress(\"b\") end\nfunction keypressn() keypress(\"n\") end\nfunction keypressm() keypress(\"m\") end\n",
      "LuaScriptState": "",
      "XmlUI": "<InputField width=\"900\" height=\"200\" position=\"0 -400 30\" rotation=\"0 180 180\" onValueChanged=\"updateButtonText()\" active=\"true\" characterLimit=\"11\" textAlignment=\"middleCenter\" contentType=\"IntegerNumber\" fontSize=\"130\" placeholder=\"Seed\" preferredHeight=\"50\"></InputField>\n<Button id=\"submit\" fontStyle=\"Bold\" outline=\"#000000\" onclick=\"setSeed()\" position=\"0 -180 30\" color=\"Blue\" width=\"400\" height=\"80\" rotation=\"0 180 180\" fontSize =\"900\" resizeTextForBestFit=\"true\" scale = \"2 2 2\">Reset</Button>\n\n<InputField width=\"900\" height=\"200\" position=\"0 50 30\" rotation=\"0 180 180\" onValueChanged=\"updateSetWordText()\" active=\"true\" characterLimit=\"5\" textAlignment=\"middleCenter\" fontSize=\"130\" placeholder=\"Word\" preferredHeight=\"50\"></InputField>\n<Button id=\"submitWord\" fontStyle=\"Bold\" outline=\"#000000\" onclick=\"setWord()\" position=\"0 270 30\" color=\"Blue\" width=\"400\" height=\"80\" rotation=\"0 180 180\" fontSize =\"900\" resizeTextForBestFit=\"true\" scale = \"2 2 2\">Set starting word</Button>"
    },
    {
      "GUID": "8dad6a",
      "Name": "Custom_Tile",
      "Transform": {
        "posX": -9.088563,
        "posY": 4.45740461,
        "posZ": -6.586257,
        "rotX": 0.0001391651,
        "rotY": 270.032257,
        "rotZ": 352.7333,
        "scaleX": 3.445388,
        "scaleY": 1,
        "scaleZ": 3.445388
      },
      "Nickname": "MemeBoard",
      "Description": "MemeBoard",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0,
        "y": 0,
        "z": 0
      },
      "ColorDiffuse": {
        "r": 0,
        "g": 0,
        "b": 0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomImage": {
        "ImageURL": "https://i.imgur.com/udUVAp3.jpg",
        "ImageSecondaryURL": "https://i.imgur.com/YuxYkwP.jpg",
        "ImageScalar": 1,
        "WidthScale": 0,
        "CustomTile": {
          "Type": 0,
          "Thickness": 0.200000152,
          "Stackable": false,
          "Stretch": true
        }
      },
      "LuaScript": "scaleMultiplier=1.8\r\nclickedTime=0\r\nfunction onLoad(save_state)\r\n    --self.interactable=false\r\n\r\n    params = {\r\n           click_function = \"onClick\",\r\n           function_owner = self,\r\n           label          = \"\",\r\n           position       = {0, 0.05, 0.7},\r\n           rotation       = {0, 0, 0},\r\n           width          = 300,\r\n           height         = 150,\r\n           font_size      = 25,\r\n           color          = {0.1, 0.1,0.1},\r\n           tooltip        = \"Meme me\",\r\n       }\r\n       self.createButton(params)\r\n\r\nend\r\n\r\nfunction onClick(obj, color, alt_click)\r\n    if(os.time()-clickedTime>3)then\r\n        printToAll(\"Generating meme. Please Wait...\", {1, 0.670, 0.121})\r\n        clickedTime=os.time()\r\n        scale=self.getScale().z/scaleMultiplier;\r\n        rot=self.getRotation()\r\n        selfPos=self.positionToWorld({0,2,-0.15})\r\n\r\n        spawnParams = {\r\n            type = \"Custom_Tile\",\r\n            position          = selfPos,\r\n            rotation          = rot,\r\n            scale             = {scale,3,scale},\r\n            sound             = false,\r\n            snap_to_grid      = true,\r\n            locked=false\r\n        }\r\n        WebRequest.get(\"https://meme-api.com/gimme\", function(a) webRequestCallback(a) end)\r\n        --makeMeme(\"https://memeshappen.com/media/created/2018/04/When-shes-the-queen--Of-your-double-wide-trailer-.jpg\")\r\n    else\r\n        num = round(3-(os.time()-clickedTime),1)\r\n        printToAll(\"Please Wait for \"..num..\" seconds\", {0.827, 0.364, 0.352})\r\n    end\r\n\r\nend\r\n\r\nfunction onRandomize(player_color)\r\n    print(\"ok\")\r\nend\r\n\r\nfunction webRequestCallback(webReturn)\r\n    decoded = JSON.decode(webReturn.text)\r\n    makeMeme(decoded['url'])\r\nend\r\n\r\nfunction makeMeme(url)\r\n    if(string.sub(url,-4)==\"jpeg\" or string.sub(url,-4)==\".jpg\" or string.sub(url,-4)==\".png\" or string.sub(url,-4)==\"webm\" or string.sub(url,-4)==\".mp4\" or string.sub(url,-4)==\".m4v\" or string.sub(url,-4)==\".mov\" or string.sub(url,-4)==\"rawt\")then\r\n        meme = spawnObject(spawnParams)\r\n        meme.setCustomObject({image = url,thickness=0.01})\r\n        meme.setLock(false)\r\n        meme = meme.reload()\r\n        printToAll(\"Your meme is ready.\", {0.564, 0.862, 0.415})\r\n    else\r\n        WebRequest.get(\"https://meme-api.com/gimme\", function(a) webRequestCallback(a) end)\r\n    end\r\nend\r\n\r\nfunction round(num, numDecimalPlaces)\r\n  local mult = 10^(numDecimalPlaces or 0)\r\n  return math.floor(num * mult + 0.5) / mult\r\nend\r\n",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "d23ebc",
      "Name": "Custom_Assetbundle",
      "Transform": {
        "posX": 0.695000648,
        "posY": 3.65208364,
        "posZ": -7.959574,
        "rotX": -0.001426265,
        "rotY": 359.984863,
        "rotZ": 351.786621,
        "scaleX": 1,
        "scaleY": 1,
        "scaleZ": 1
      },
      "Nickname": "Chimp Test",
      "Description": "v0.2 by Ugleh\nBased off Human Benchmark game of the same name",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0,
        "y": 0,
        "z": 0
      },
      "ColorDiffuse": {
        "r": 0.117646016,
        "g": 0.6666667,
        "b": 1
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": false,
      "Snap": false,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomAssetbundle": {
        "AssetbundleURL": "https://steamusercontent-a.akamaihd.net/ugc/2115062479272936759/82DBA027C305B339F09F52ADC8EA7ADB6A0D1B87/",
        "AssetbundleSecondaryURL": "",
        "MaterialIndex": 0,
        "TypeIndex": 0,
        "LoopingEffectIndex": 0
      },
      "LuaScript": "game_player = nil\r\ngame_start = false\r\nlevel = 3\r\nnumber_pressed = 0\r\ntableOfNumbers = {}\r\nlabeledNumbers = {}\r\ngame_muted = false\r\ntimerLastPressed = nil\r\n\r\n\r\nfunction onUpdate()\r\n--If 1 minute passes, end game\r\n    if(game_start and timerLastPressed and (os.time() - timerLastPressed) > 45) then\r\n        printToColor(\"[B][ff00ff]Chimp Test[-][/B]: Game timeout.\", game_player, {1,0,0})\r\n        gameOver(game_player)\r\n    end\r\nend\r\n\r\nfunction startGame(object, player_color, right_click)\r\n    if(game_player == nil) then\r\n        game_player = player_color\r\n        self.highlightOn(player_color)\r\n        timerLastPressed = os.time()\r\n        level = 3\r\n        number_pressed = 0\r\n        game_start = true\r\n        initGame()\r\n    end\r\nend\r\n\r\nfunction muteGame(a,b,c)\r\n    game_muted = not game_muted\r\n    if(game_muted) then\r\n        self.editButton({index=50, color = {1,0,0}, tooltip = \"Unmute Game\"})\r\n        printToColor(\"[B][ff00ff]Chimp Test[-][/B]: Game Muted\", b, {1,1,1})\r\n    else\r\n        self.editButton({index=50, color = {1,1,1}, tooltip = \"Mute Game\"})\r\n        printToColor(\"[B][ff00ff]Chimp Test[-][/B]: Game unmuted\", b, {1,1,1})\r\n    end\r\nend\r\n\r\nfunction initGame()\r\n    number_pressed = 0\r\n    increaseLevel()\r\n    displayButtons()\r\nend\r\n\r\nfunction increaseLevel()\r\n    level = level + 1\r\n    self.editButton({index=49, label=\"[ABCFED]Numbers: [-] [FFFFFF]\".. level .. \"[-]\", width = 0, height = 0, click_function=\"null\"})\r\nend\r\n\r\nfunction displayButtons()\r\n    labeledNumbers = {}\r\n    shuffle(tableOfNumbers)\r\n    for i = 1, level, 1 do\r\n        table.insert(labeledNumbers, tableOfNumbers[i])\r\n        self.editButton({index=tableOfNumbers[i], label= i,color = {1,1,1,1}, rotation = {0, 180, 0}})\r\n    end\r\nend\r\nfunction pressedButton(index, object, player_color, right_click)\r\n    if(player_color ~= game_player) then return end\r\n    pressedNumber(index, player_color, (level == 4))\r\nend\r\n\r\nfunction pressedNumber(bIndex, player_color, is_intro)\r\n    timerLastPressed = os.time()\r\n    if(not is_intro and number_pressed) then\r\n        hideNumbers()\r\n    end\r\n\r\n    if(labeledNumbers[number_pressed+1] == (bIndex-1)) then\r\n        number_pressed = number_pressed + 1\r\n        self.editButton({index=bIndex-1, label= \" \",color = {0,0,0,0}, rotation = {0, 180, 180}})\r\n        if(not game_muted) then self.AssetBundle.playTriggerEffect(math.random(0, 8)) end\r\n        if(number_pressed == level) then\r\n            initGame()\r\n        end\r\n    else\r\n        gameOver(player_color)\r\n    end\r\nend\r\n\r\nfunction hideNumbers()\r\n    for i,j in ipairs(labeledNumbers) do\r\n        self.editButton({index = j, label = \" \"})\r\n    end\r\nend\r\n\r\n\r\nfunction gameOver(player_color)\r\n    printToColor(\"[B][ff00ff]Chimp Test[-][/B]: Game Over, you lost at \" .. level .. \" numbers\", player_color, {1,0,0})\r\n    self.editButton({index=49, label=\"Start\", width = 1000, height = 500, click_function=\"startGame\"})\r\n    game_start = false\r\n    game_player = nil\r\n    self.highlightOff()\r\n    level = 3\r\n    number_pressed = 0\r\n    for i = 0, 47, 1 do\r\n        self.editButton({index=i, label= \" \",color = {0,0,0,0}, rotation = {0, 180, 180}})\r\n    end\r\nend\r\n\r\nfunction onLoad()\r\n    local xOffset = -1.1\r\n    local zOffset = -1.1\r\n    local startVector = Vector(3.85, 0.5, 1.8)\r\n    local indexIncrease = 1\r\n    for j = 1, 6, 1 do\r\n        for i = 1, 8, 1 do\r\n            local data = {click_function = \"pressed_\" .. indexIncrease, function_owner = self, label = \" \", position = startVector + Vector(xOffset * (i-1),0,zOffset * (j-1)), rotation = {0, 180, 180}, scale = {0.7, 0.7, 0.7}, width = 700, height = 700, color = {0,0,0,0}, font_size = 400}\r\n            self.createButton(data)\r\n            table.insert(tableOfNumbers, (indexIncrease-1))\r\n            indexIncrease = indexIncrease + 1\r\n        end\r\n    end\r\n\r\n    for i = 1, (indexIncrease-1) do\r\n        _G[\"pressed_\" .. i] = function(a,b,c)\r\n          pressedButton(i,a,b,c)\r\n        end\r\n      end\r\n    local datax1 = {click_function = \"null\", function_owner = self, label = \"Chimp Test\", position = {0, 0.5, 3.9}, rotation = {0, 180, 0}, width = 0, height = 0, font_size = 400, color = {0, 0, 0, 1}, font_color = {1,1,1,1}}\r\n    local datax2 = {click_function = \"startGame\", function_owner = self, label = \"Start\", position = {0, 0.5, 3}, rotation = {0, 180, 0}, scale = {0.7, 0.7, 0.7}, width = 1000, height = 500, font_size = 400}\r\n    local datax3 = {click_function = \"muteGame\", function_owner = self, label = \"m\", tooltip = \"Mute Game\", position = {-4, 0.5, 4}, rotation = {0, 180, 0}, scale = {0.7, 0.7, 0.7}, width = 500, height = 500, font_size = 400}\r\n\r\n    self.createButton(datax1)\r\n    self.createButton(datax2)\r\n    self.createButton(datax3)\r\n\r\n    function pressed1(a,b,c) pressed(0,a,b,c) end\r\n    function pressed2(a,b,c) pressed(1,a,b,c) end\r\n    function pressed3(a,b,c) pressed(2,a,b,c) end\r\n    function pressed4(a,b,c) pressed(3,a,b,c) end\r\n    function pressed5(a,b,c) pressed(4,a,b,c) end\r\n    function pressed6(a,b,c) pressed(5,a,b,c) end\r\n    function pressed7(a,b,c) pressed(6,a,b,c) end\r\n    function pressed8(a,b,c) pressed(7,a,b,c) end\r\n    function pressed9(a,b,c) pressed(8,a,b,c) end\r\nend\r\n\r\nfunction null() end\r\n\r\nfunction shuffle (arr)\r\n    for i = 1, #arr - 1 do\r\n      local j = math.random(i, #arr)\r\n      arr[i], arr[j] = arr[j], arr[i]\r\n    end\r\n  end",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "97cc8c",
      "Name": "Custom_Board",
      "Transform": {
        "posX": -0.007305272,
        "posY": 1.98531938,
        "posZ": -0.0198345669,
        "rotX": 0.00579398265,
        "rotY": 90.00096,
        "rotZ": 0.0015493501,
        "scaleX": 0.375000447,
        "scaleY": 0.375000447,
        "scaleZ": 0.375000447
      },
      "Nickname": "Connections",
      "Description": "",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0,
        "y": 0,
        "z": 0
      },
      "ColorDiffuse": {
        "r": 0.7867647,
        "g": 0.7867647,
        "b": 0.7867647
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomImage": {
        "ImageURL": "https://steamusercontent-a.akamaihd.net/ugc/781869463130028365/CF050B2D2A7D16EAEE493A009D0727C98672020D/",
        "ImageSecondaryURL": "",
        "ImageScalar": 1,
        "WidthScale": 0.9867257
      },
      "LuaScript": "listedWords = {}\r\nwordPositions = {}\r\nbuttonIds = {\r\n  \"button_box_1_1\",\r\n  \"button_box_1_2\",\r\n  \"button_box_1_3\",\r\n  \"button_box_1_4\",\r\n  \"button_box_2_1\",\r\n  \"button_box_2_2\",\r\n  \"button_box_2_3\",\r\n  \"button_box_2_4\",\r\n  \"button_box_3_1\",\r\n  \"button_box_3_2\",\r\n  \"button_box_3_3\",\r\n  \"button_box_3_4\",\r\n  \"button_box_4_1\",\r\n  \"button_box_4_2\",\r\n  \"button_box_4_3\",\r\n  \"button_box_4_4\"\r\n}\r\n\r\ndescriptionElements = {\r\n  \"firstDescription\",\r\n  \"firstDescription\",\r\n  \"firstDescription\",\r\n  \"firstDescription\",\r\n  \"secondDescription\",\r\n  \"secondDescription\",\r\n  \"secondDescription\",\r\n  \"secondDescription\",\r\n  \"thirdDescription\",\r\n  \"thirdDescription\",\r\n  \"thirdDescription\",\r\n  \"thirdDescription\",\r\n  \"fourthDescription\",\r\n  \"fourthDescription\",\r\n  \"fourthDescription\",\r\n  \"fourthDescription\"\r\n}\r\ndescriptionElement = {\r\n  \"firstDescription\",\r\n  \"secondDescription\",\r\n  \"thirdDescription\",\r\n  \"fourthDescription\"\r\n}\r\n\r\ncurrentFourSelections = {}\r\ncurrentFourSelectionsIDs = {}\r\n\r\ncurrentFourAmount = 0\r\n\r\nhighlightColors = {\"#00496F\", \"#017B5B\", \"#5A2044\", \"#00707D\"}\r\ncurrentRow = 0\r\ncorrectRows = 0\r\nlives = 3\r\nclues = {}\r\nsearchTerm = \"\"\r\n\r\nfunction onLoad(save_state)\r\n  WebRequest.get(\"http://ugleh.com/puzzgrid.php?id=\" .. math.random(1, 30727), function(a) webRequestCallback(a) end)\r\nend\r\n\r\nfunction updatePuzzle()\r\n  self.UI.setAttribute(\"heartsleft\", \"text\", \"\")\r\n  listedWords = {}\r\n  wordPositions = {}\r\n  currentFourSelections = {}\r\n  currentFourSelectionsIDs = {}\r\n  currentFourAmount = 0\r\n  currentRow = 0\r\n  correctRows = 0\r\n  lives = 3\r\n\r\n  for i,j in pairs(buttonIds) do\r\n    self.UI.setAttribute(j, \"color\", \"#C0E0EE\")\r\n    self.UI.setAttribute(j, \"textColor\", \"#000000\")\r\n  end\r\n\r\n  for _,j in ipairs(descriptionElement) do\r\n    self.UI.setAttribute(j, \"text\", \"\")\r\n  end\r\n\r\n\r\n  if(searchTerm ~= \"\") then\r\n    WebRequest.get(\"http://ugleh.com/puzzgrid.php?id=\" .. searchTerm, function(a) webRequestCallback(a) end)\r\n  else\r\n    WebRequest.get(\"http://ugleh.com/puzzgrid.php?id=\" .. math.random(1, 30872), function(a) webRequestCallback(a) end)\r\n  end\r\n  self.flip()\r\nend\r\n\r\nfunction updateSearch(ply, text)\r\n  searchTerm = text\r\n  if(searchTerm == \"\") then\r\n    self.UI.setAttribute(\"updatepuzzle\", \"text\", \"Random\")\r\n  else\r\n    self.UI.setAttribute(\"updatepuzzle\", \"text\", \"Update\")\r\n  end\r\nend\r\n\r\n\r\nfunction unescape (s)\r\n  s = string.gsub(s, \"+\", \" \")\r\n  s = string.gsub(s, \"%%(%x%x)\", function (h)\r\n        return string.char(tonumber(h, 16))\r\n      end)\r\n  return s\r\nend\r\n\r\nfunction finalEscape(s)\r\n  s = string.gsub(s, \"&quot;\", \"\\\"\")\r\n  return s\r\nend\r\n\r\n\r\nfunction webRequestCallback(webReturn)\r\n  listedWords = JSON.decode(webReturn.text)\r\n  wordPositions = {}\r\n  local newListedWords = {}\r\n  local onlyWords = {}\r\n  for i,j in pairs(listedWords) do\r\n    for ii,jj in pairs(j) do\r\n      newListedWords[ii] = jj\r\n      for iii,jjj in pairs(jj) do\r\n        table.insert(onlyWords, jjj)\r\n        wordPositions[jjj] = ii\r\n      end\r\n    end\r\n  end\r\n  listedWords = newListedWords\r\n  onlyWords = shuffle(onlyWords)\r\n\r\n  for i,j in ipairs(buttonIds) do\r\n    self.UI.setAttribute(j, \"text\", onlyWords[i])\r\n  end\r\ncheckChunks();\r\nend\r\n\r\n\r\nfunction pressed(player, id)\r\n  Wait.frames(function() pressedLoaded(player, id) end, 1)\r\nend\r\n\r\nfunction pressedLoaded(player, selectedCell)\r\n  local endOfRow = currentRow * 4\r\n  local startOfRow = endOfRow - 3\r\n  if(tonumber(selectedCell) <= endOfRow) then return end\r\n  selectedButtonId = buttonIds[tonumber(selectedCell)]\r\n  selectedText = self.UI.getAttribute(selectedButtonId, \"text\")\r\n  if(currentFourSelections[selectedText] == nil) then\r\n    currentFourSelections[selectedText] = wordPositions[selectedText]\r\n    currentFourSelectionsIDs[selectedText] = selectedCell\r\n    self.UI.setAttribute(selectedButtonId, \"color\", highlightColors[currentRow+1])\r\n    self.UI.setAttribute(selectedButtonId, \"textColor\", \"#FFFFFF\")\r\n    currentFourAmount = currentFourAmount + 1\r\n  else\r\n    currentFourSelections[selectedText] = nil\r\n    currentFourSelectionsIDs[selectedText] = nil\r\n    self.UI.setAttribute(selectedButtonId, \"color\", \"#C0E0EE\")\r\n    self.UI.setAttribute(selectedButtonId, \"textColor\", \"#000000\")\r\n    currentFourAmount = currentFourAmount - 1\r\n  end\r\n  checkChunks()\r\nend\r\n\r\n\r\nfunction checkChunks()\r\n  if(currentFourAmount ~= 4) then return end\r\n  local firstResult = nil\r\n  local isAllRight = true\r\n  for i,j in pairs(currentFourSelections) do\r\n    if(firstResult == nil) then firstResult = j end\r\n    if(firstResult != j) then\r\n      isAllRight = false\r\n      break\r\n    end\r\n  end\r\n\r\n  if(isAllRight) then\r\n    winningGroup(currentFourSelections)\r\n    return\r\n  end\r\n\r\n  if(correctRows == 2) then\r\n    lives = lives - 1\r\n    if(lives == 0) then\r\n      printToAll(\"[FF0000][Connection Wall][-]: Dead! But I will let you keep going, because I haven't coded this far :P\", \"White\")\r\n      self.UI.setAttribute(\"heartsleft\", \"text\",string.rep(\"♥\", lives, \"\"))\r\n    elseif(lives > 0) then\r\n      printToAll(\"[FF0000][Connection Wall][-]: \" .. lives .. \" lives remaining!\", \"White\")\r\n      self.UI.setAttribute(\"heartsleft\", \"text\",string.rep(\"♥\", lives, \"\"))\r\n    end\r\n  end\r\n\r\n  for i,j in pairs(currentFourSelectionsIDs) do\r\n    self.UI.setAttribute(buttonIds[tonumber(j)], \"color\", \"#C0E0EE\")\r\n  end\r\n  currentFourSelections = {}\r\n  currentFourSelectionsIDs = {}\r\n  currentFourAmount = 0\r\n\r\nend\r\n\r\nfunction winningGroup(wordsInList)\r\n  correctRows = correctRows + 1\r\n  printToAll(\"[FF0000][Connection Wall][-]: Correct!\", \"White\")\r\n  for i,j in pairs(currentFourSelectionsIDs) do\r\n    self.UI.setAttribute(buttonIds[tonumber(j)], \"color\", \"#C0E0EE\")\r\n  end\r\n\r\n  currentRow = currentRow + 1\r\n  local endOfRow = currentRow * 4\r\n  local startOfRow = endOfRow - 3\r\n  local index = startOfRow\r\n\r\n  local replaceWords = {}\r\n  local category = nil\r\n\r\n  for i,j in pairs(currentFourSelections) do\r\n    category = j\r\n    break\r\n  end\r\n\r\n  for i = startOfRow,endOfRow,1 do\r\n    selectedText = self.UI.getAttribute(buttonIds[tonumber(i)], \"text\")\r\n    if(category != wordPositions[selectedText]) then\r\n      --This word needs to be replaced\r\n      table.insert(replaceWords, selectedText)\r\n    end\r\n  end\r\n\r\n  local rIndex = 1\r\n  for i,j in pairs(currentFourSelectionsIDs) do\r\n    local num = tonumber(j)\r\n    if(not (num >= startOfRow and num <= endOfRow)) then\r\n      self.UI.setAttribute(buttonIds[num], \"text\", replaceWords[rIndex])\r\n      self.UI.setAttribute(buttonIds[num], \"color\", \"#C0E0EE\")\r\n      if(currentRow != 4) then\r\n        self.UI.setAttribute(buttonIds[num], \"textColor\", \"#000000\")\r\n      end\r\n      rIndex = rIndex + 1\r\n    end\r\n  end\r\n\r\n  for i,j in pairs(currentFourSelections) do\r\n    self.UI.setAttribute(buttonIds[index], \"text\", i)\r\n    self.UI.setAttribute(buttonIds[index], \"color\", highlightColors[currentRow])\r\n    self.UI.setAttribute(buttonIds[index], \"textColor\", \"#FFFFFF\")\r\n    index = index + 1\r\n  end\r\n\r\n  currentFourSelections = {}\r\n  currentFourSelectionsIDs = {}\r\n  currentFourAmount = 0\r\n\r\n\r\nif(correctRows == 2) then\r\n  printToAll(\"[FF0000][Connection Wall][-]: 2 More Rows, You only get 3 lives!\", \"White\")\r\n  self.UI.setAttribute(\"heartsleft\", \"text\",string.rep(\"♥\", lives, \"\"))\r\nend\r\n\r\nif(correctRows == 3) then\r\n  correctRows = 4\r\n  currentRow = 4\r\n  for i=1,4,1 do\r\n    self.UI.setAttribute(\"button_box_4_\" .. i, \"color\", highlightColors[currentRow])\r\n    self.UI.setAttribute(\"button_box_4_\" .. i, \"textColor\", \"#FFFFFF\")\r\n  end\r\n  Wait.time(function() inputConnectionsStage() end, 1, 1)\r\nend\r\nend\r\n\r\nfunction inputConnectionsStage()\r\n  printToAll(\"[FF0000][Connection Wall][-]: Connections stage coming soon.\", \"White\")\r\n  self.UI.setAttribute(\"heartsleft\", \"text\", \"\")\r\n  local firstWord = self.UI.getAttribute(\"button_box_1_4\", \"text\")\r\n  local secondWord = self.UI.getAttribute(\"button_box_2_4\", \"text\")\r\n  local thirdWord = self.UI.getAttribute(\"button_box_3_4\", \"text\")\r\n  local fourthWord = self.UI.getAttribute(\"button_box_4_4\", \"text\")\r\n\r\n  local firstEntry = wordPositions[firstWord]\r\n  local secondEntry = wordPositions[secondWord]\r\n  local thirdEntry = wordPositions[thirdWord]\r\n  local fourthEntry = wordPositions[fourthWord]\r\n\r\n  self.UI.setAttribute(\"firstDescription\", \"text\", string.sub(firstEntry, 3))\r\n  self.UI.setAttribute(\"secondDescription\", \"text\", string.sub(secondEntry, 3))\r\n  self.UI.setAttribute(\"thirdDescription\", \"text\", string.sub(thirdEntry, 3))\r\n  self.UI.setAttribute(\"fourthDescription\", \"text\", string.sub(fourthEntry, 3))\r\nend\r\n\r\n\r\nfunction shuffle(tbl)\r\n  for i = #tbl, 2, -1 do\r\n    local j = math.random(i)\r\n    tbl[i], tbl[j] = tbl[j], tbl[i]\r\n  end\r\n  return tbl\r\nend",
      "LuaScriptState": "",
      "XmlUI": "<Defaults>\r\n  <Canvas width=\"1600\" height=\"1600\" position=\"0 0 -60\" color=\"#FFFFFF\"/>\r\n  <TableLayout color=\"#FFFFFF\" outline=\"#000000\" outlineSize=\"2\"/>\r\n  <Button fontSize=\"40\" fontStyle=\"Bold\" scale = \"2 2 2\" width = \"200\" height = \"200\" outline=\"#000000\" color=\"#C0E0EE\" resizeTextForBestFit=\"true\"/>\r\n  <InputField width=\"900\" height=\"200\" position=\"0 0 60\" rotation=\"0 180 0\"/>\r\n</Defaults>\r\n<InputField onValueChanged=\"updateSearch()\" active=\"true\" characterLimit=\"6\" textAlignment=\"middleCenter\" contentType=\"IntegerNumber\" fontSize=\"130\" placeholder=\"PuzzGrid ID\" preferredHeight=\"50\"></InputField>\r\n<Button id=\"updatepuzzle\" onclick=\"updatePuzzle()\" position=\"0 -300 60\" color=\"Blue\" width=\"200\" height=\"80\" rotation=\"0 180 0\" fontSize =\"900\" resizeTextForBestFit=\"true\" scale = \"2 2 2\">Random</Button>\r\n<Text id=\"heartsleft\" position=\"0 -1000 -60\" color=\"Red\" fontSize =\"300\"></Text>\r\n<Text id=\"firstDescription\" width=\"850\" height=\"200\" position=\"1260 600 -60\" color=\"#00496F\" horizontalOverflow=\"Wrap\" verticalOverflow=\"Overflow\" fontSize =\"100\" textAlignment=\"UpperLeft\"></Text>\r\n<Text id=\"secondDescription\" width=\"850\" height=\"200\" position=\"1260 200 -60\" color=\"#017B5B\" horizontalOverflow=\"Wrap\" verticalOverflow=\"Overflow\" background=\"#FF0000\" fontSize =\"100\" textAlignment=\"UpperLeft\"></Text>\r\n<Text id=\"thirdDescription\" width=\"850\" height=\"200\" position=\"1260 -200 -60\" color=\"#5A2044\" horizontalOverflow=\"Wrap\" verticalOverflow=\"Overflow\" fontSize =\"100\" textAlignment=\"UpperLeft\"></Text>\r\n<Text id=\"fourthDescription\" width=\"850\" height=\"200\" position=\"1260 -600 -60\" fontSize =\"100\" horizontalOverflow=\"Wrap\" verticalOverflow=\"Overflow\" textAlignment=\"UpperLeft\"></Text>\r\n<Canvas>\r\n<Panel>\r\n<TableLayout>\r\n    <Row>\r\n        <Cell>\r\n          <TableLayout id=\"box_1_1\">\r\n            <Button id=\"button_box_1_1\" onclick=\"pressed(1)\"></Button>\r\n          </TableLayout>\r\n        </Cell>\r\n        <Cell>\r\n          <TableLayout id=\"box_1_2\">\r\n            <Button id=\"button_box_1_2\" onclick=\"pressed(2)\"></Button>\r\n          </TableLayout>\r\n        </Cell>\r\n        <Cell>\r\n          <TableLayout id=\"box_1_3\">\r\n            <Button id=\"button_box_1_3\" onclick=\"pressed(3)\"></Button>\r\n          </TableLayout>\r\n        </Cell>\r\n        <Cell>\r\n          <TableLayout id=\"box_1_4\">\r\n            <Button id=\"button_box_1_4\" onclick=\"pressed(4)\"></Button>\r\n          </TableLayout>\r\n        </Cell>\r\n    </Row>\r\n    <Row>\r\n        <Cell>\r\n          <TableLayout id=\"box_2_1\">\r\n            <Button id=\"button_box_2_1\" onclick=\"pressed(5)\"></Button>\r\n          </TableLayout>\r\n        </Cell>\r\n        <Cell>\r\n          <TableLayout id=\"box_2_2\">\r\n            <Button id=\"button_box_2_2\" onclick=\"pressed(6)\"></Button>\r\n          </TableLayout>\r\n        </Cell>\r\n        <Cell>\r\n          <TableLayout id=\"box_2_3\">\r\n            <Button id=\"button_box_2_3\" onclick=\"pressed(7)\"></Button>\r\n          </TableLayout>\r\n        </Cell>\r\n        <Cell>\r\n          <TableLayout id=\"box_2_4\">\r\n            <Button id=\"button_box_2_4\" onclick=\"pressed(8)\"></Button>\r\n          </TableLayout>\r\n        </Cell>\r\n    </Row>\r\n    <Row>\r\n        <Cell>\r\n          <TableLayout id=\"box_3_1\">\r\n            <Button id=\"button_box_3_1\" onclick=\"pressed(9)\"></Button>\r\n          </TableLayout>\r\n        </Cell>\r\n        <Cell>\r\n          <TableLayout id=\"box_3_2\">\r\n            <Button id=\"button_box_3_2\" onclick=\"pressed(10)\"></Button>\r\n          </TableLayout>\r\n        </Cell>\r\n        <Cell>\r\n          <TableLayout id=\"box_3_3\">\r\n            <Button id=\"button_box_3_3\" onclick=\"pressed(11)\"></Button>\r\n          </TableLayout>\r\n        </Cell>\r\n        <Cell>\r\n          <TableLayout id=\"box_3_4\">\r\n            <Button id=\"button_box_3_4\" onclick=\"pressed(12)\"></Button>\r\n          </TableLayout>\r\n        </Cell>\r\n    </Row>\r\n    <Row>\r\n        <Cell>\r\n          <TableLayout id=\"box_4_1\">\r\n            <Button id=\"button_box_4_1\" onclick=\"pressed(13)\"></Button>\r\n          </TableLayout>\r\n        </Cell>\r\n        <Cell>\r\n          <TableLayout id=\"box_4_2\">\r\n            <Button id=\"button_box_4_2\" onclick=\"pressed(14)\"></Button>\r\n          </TableLayout>\r\n        </Cell>\r\n        <Cell>\r\n          <TableLayout id=\"box_4_3\">\r\n            <Button id=\"button_box_4_3\" onclick=\"pressed(15)\"></Button>\r\n          </TableLayout>\r\n        </Cell>\r\n        <Cell>\r\n          <TableLayout id=\"box_4_4\">\r\n            <Button id=\"button_box_4_4\" onclick=\"pressed(16)\"></Button>\r\n          </TableLayout>\r\n        </Cell>\r\n    </Row>\r\n</TableLayout>\r\n</Panel>\r\n</Canvas>\r\n"
    }
  ]